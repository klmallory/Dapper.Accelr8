<#+
  
  internal abstract class DbHelper
	{
		public abstract IDictionary<string, DbTable> GetDbTables(string connectionString, string database);
		public abstract List<DbColumn> GetDbColumns(string connectionString, string database, string tableName, string schema = "dbo");
		public abstract List<DbChild> GetChildren(string connectionString, string database, string tableName, string schema = "dbo");
		public abstract List<DbParent> GetParents(string connectionString, string database, string tableName, string schema = "dbo");
		public abstract string MapCsharpType(string dbtype);
		public abstract Type MapCommonType(string dbtype);
	}

    public class DbTable
    {
		  public DbTable()
		  {
			  Children = new List<DbChild>();
			  Columns = new List<DbColumn>();
		  }
		
			public string TableName { get; set; }
			public string SchemaName { get; set; }
		    public string TableType {get; set; }
			public int Rows { get; set; }
			public bool HasPrimaryKey { get; set; }
		    public List<DbColumn> Columns { get; set; }
		    public List<DbChild> Children { get; set; }
		    public List<DbParent> Parents { get; set; }

		    public string TableAlias { get; set; }
		    public bool Ignore { get; set; }
		    public bool ReadOnly { get; set; }
		    public string ClassName { get; set; }

		public string GetTableName()
		{
			if (string.IsNullOrEmpty(SchemaName) || SchemaName.ToLower() == "dbo")
				return TableName;

			return SchemaName + "." + TableName;
		}
    }

    public class DbColumn
    {
        public int ColumnID { get; set; }
        public bool IsPrimaryKey { get; set; }
        public string ColumnName { get; set; }
        public string ColumnType { get; set; }
        public string CSharpType { get; set; }
		public string CastType { get; set; }
        public Type CommonType { get; set; }
        public int ByteLength { get; set; }
        public int CharLength { get; set; }
        public int Scale { get; set; }
        public bool IsIdentity { get; set; }
        public bool IsNullable { get; set; }
        public string Remark { get; set; }
		public string Splits { get; set; }
		public bool Ignore { get; set; }
		public bool ReadOnly { get; set; }
		public string FieldName { get; set; }
    }

	public class DbChild
	{
		public string Name { get; set; }
		public string Schema { get; set; }
		public string Table { get; set; }
		public string Parent { get; set; }
		public string OriginalColumnName { get; set; }
		public string Column { get; set; }
		public string ParentColumn { get; set; }
		public string CSharpType { get; set; }
		public string ChildCSharpType { get; set; }
		public string TableAlias { get; set; }

		public bool Ignore { get; set; }
		public bool OneToOne { get; set; }

		public bool ChildColumnIsPrimaryKey { get; set; }
		public string ChildClassName { get; set; }
		public string ChildFieldName { get; set; }
		public string ChildClassFieldName { get; set; }
		public string ParentClassFieldName { get; set; }
		public bool IsNullable { get; set; }
	}

    public class DbParent
    {
		public string Name { get; set; }
		public string Schema { get; set; }
		public string Table { get; set; }
		public string Parent { get; set; }
		public string OriginalColumnName { get; set; }
		public string Column { get; set; }
		public string ParentColumn { get; set; }
		public string CSharpType { get; set; }
		public string ParentAlias { get; set; }

		public bool Ignore { get; set; }

		public bool ParentColumnIsPrimaryKey { get; set; }
		public string ParentClassName { get; set; }
		public string ParentClassFieldName { get; set; }
		public string ParentFieldName { get; set; }
		public string ChildFieldName { get; set; }
		public bool IsNullable { get; set; }		
    }

	//SQL Helper
    internal class SqlServerDbHelper : DbHelper
    {
		public string GetTableNameWithSchema(DbTable table)
		{
			if (string.IsNullOrEmpty(table.SchemaName) || table.SchemaName.ToLower() == "dbo")
				return table.TableName;

			return table.SchemaName + "." + table.TableName;
		}

		public string GetTableNameWithSchema(DbChild child)
		{
			if (string.IsNullOrEmpty(child.Schema) || child.Schema.ToLower() == "dbo")
				return child.Table;

			return child.Schema + "." + child.Table;
		}

        public override IDictionary<string, DbTable> GetDbTables(string connectionString, string database)
        {
            string tables = null;

            string sql = string.Format(@"SELECT
                                    obj.name tablename,
                                    schem.name schemname,
                                    COALESCE(idx.rows, 0) rows,
                                    CAST
                                    (
                                        CASE 
                                            WHEN (SELECT COUNT(1) FROM sys.indexes WHERE object_id= obj.OBJECT_ID AND is_primary_key=1) >=1 THEN 1
                                            ELSE 0
                                        END 
                                    AS BIT) HasPrimaryKey,
									[type] as [type]                              
                                    from {0}.sys.objects obj 
									INNER JOIN {0}.sys.schemas schem ON obj.schema_id=schem.schema_id
                                    left outer join {0}.dbo.sysindexes idx on obj.object_id=idx.id and idx.indid<=1
                                    where type in ('U', 'V') {1}
                                    order by obj.name", database, tables);

            DataTable dt = GetDataTable(connectionString, sql);
            return dt.Rows.Cast<DataRow>().Select(row => new DbTable

            {
                TableName = row.Field<string>("tablename"),
                SchemaName = row.Field<string>("schemname"),
				TableType = row.Field<string>("type").Trim(),
                Rows = row.Field<int>("rows"),
                HasPrimaryKey = row.Field<bool>("HasPrimaryKey"),
				ReadOnly = row.Field<string>("type").Trim() == "V"
            }).ToDictionary(c => c.SchemaName != "dbo" ? c.SchemaName + "." +  c.TableName : c.TableName);
        }
        
        public override List<DbColumn> GetDbColumns(string connectionString, string database, string tableName, string schema = "dbo")
        {
            string sql = string.Format(@"
                        WITH indexCTE AS
                        (
                            SELECT 
                            ic.column_id,
                            ic.index_column_id,
                            ic.object_id    
                            FROM {0}.sys.indexes idx
                            INNER JOIN {0}.sys.index_columns ic ON idx.index_id = ic.index_id AND idx.object_id = ic.object_id
                            WHERE  idx.object_id =OBJECT_ID(@tableName) AND idx.is_primary_key=1
                        )
                        select distinct
                        colm.column_id ColumnID,
                        CAST(CASE WHEN indexCTE.column_id IS NULL THEN 0 ELSE 1 END AS BIT) IsPrimaryKey,
                        colm.name ColumnName,
                        systype.name ColumnType,
                        colm.is_identity IsIdentity,
                        colm.is_nullable IsNullable,
                        cast(colm.max_length as int) ByteLength,
                        (
                            case 
                                when systype.name='nvarchar' and colm.max_length>0 then colm.max_length/2 
                                when systype.name='nchar' and colm.max_length>0 then colm.max_length/2
                                when systype.name='ntext' and colm.max_length>0 then colm.max_length/2 
                                else colm.max_length
                            end
                        ) CharLength,
                        cast(colm.precision as int) Precision,
                        cast(colm.scale as int) Scale
                        
                        from {0}.sys.columns colm
                        inner join {0}.sys.types systype on colm.system_type_id=systype.system_type_id and colm.user_type_id=systype.user_type_id
                        left join {0}.sys.extended_properties prop on colm.object_id=prop.major_id and colm.column_id=prop.minor_id
                        LEFT JOIN indexCTE ON colm.column_id=indexCTE.column_id AND colm.object_id=indexCTE.object_id                                        
                        where colm.object_id=OBJECT_ID(@tableName)
                        order by colm.column_id", database);

            SqlParameter param = new SqlParameter("@tableName", SqlDbType.NVarChar, 100) { Value = string.Format("{0}.{1}.{2}", database, schema, tableName) };
            DataTable dt = GetDataTable(connectionString, sql, param);
            return dt.Rows.Cast<DataRow>().Select(row => new DbColumn()
            {
                ColumnID = row.Field<int>("ColumnID"),
                IsPrimaryKey = row.Field<bool>("IsPrimaryKey"),
                ColumnName = row.Field<string>("ColumnName"),
                ColumnType = row.Field<string>("ColumnType"),
                IsIdentity = row.Field<bool>("IsIdentity"),
                IsNullable = row.Field<bool>("IsNullable"),
                ByteLength = row.Field<int>("ByteLength"),
                CharLength = row.Field<int>("CharLength"),
                Scale = row.Field<int>("Scale"),
				CSharpType = MapCsharpType(row.Field<string>("ColumnType")),
				CommonType = MapCommonType(row.Field<string>("ColumnType"))
            }).ToList();
        }
        
        public override List<DbChild> GetChildren(string connectionString, string database, string tableName, string schema = "dbo")
        {
            string sql = string.Format(@"
				    WITH indexCTE AS
				    (
					    SELECT 
					    ic.column_id,
					    ic.index_column_id,
					    ic.object_id
					    FROM sys.indexes idx
					    join sys.index_columns ic ON idx.index_id = ic.index_id AND idx.object_id = ic.object_id
					    WHERE idx.is_primary_key=1
				    )
				    select OBJECT_NAME(fk.object_id) Name,
					    sc.name [Schema],
					    OBJECT_NAME(fk.referenced_object_id) Parent,
					    pCol.Name ParentColumn,
					    Object_Name(fk.parent_object_id) [Table],
					    col.Name [Column],
					    CAST(CASE WHEN indexCTE.column_id IS NULL THEN 0 ELSE 1 END AS BIT) IsPrimaryKey,
					    col.is_nullable IsNullable,
					    pSysType.name ColumnType,
					    cSysType.name ChildType
					
				    from sys.foreign_keys fk
				    join sys.objects obj on obj.object_id = fk.object_id
				    join sys.schemas sc on sc.schema_id = obj.schema_id
				    join sys.foreign_key_columns fkc on fkc.constraint_object_id = fk.object_id
				    join sys.columns pCol on pCol.column_id = fkc.constraint_column_id  and pCol.object_id = fk.referenced_object_id
				    join sys.columns col on col.column_id = fkc.parent_column_id and col.object_id = fk.parent_object_id
				    join sys.systypes pSysType on pSysType.xusertype = pCol.system_type_id
				    join (select top 10000	
						    object_id, 
						    min(index_id) as index_id, 
						    min(index_column_id) as index_column_id, 
						    min(column_id) as column_id, 
						    min(key_ordinal) as key_ordinal, 
						    min(partition_ordinal) as partition_ordinal
						     from sys.index_columns sic 
							    where sic.is_included_column = 0 
							    group by sic.object_id
							    order by column_id) as cixc on cixc.object_id = col.object_id
				    join sys.indexes idx on idx.index_id = cixc.index_id and idx.object_id = cixc.object_id and idx.is_primary_key = 1
				    left outer join sys.columns cpk on cpk.column_id = cixc.index_column_id and cpk.object_id = cixc.object_id
				    left outer join sys.systypes cSysType on cSysType.xusertype = cpk.system_type_id
				    left outer join indexCTE ON col.column_id = indexCTE.column_id AND col.object_id = indexCTE.object_id
				    where fk.referenced_object_id = OBJECT_ID(@tableName)", database);

            SqlParameter param = new SqlParameter("@tableName", SqlDbType.NVarChar, 100) { Value = string.Format("{0}.{1}.{2}", database, schema, tableName) };
            DataTable dt = GetDataTable(connectionString, sql, param);

            return dt.Rows.Cast<DataRow>().Select(row => new DbChild()
            {
				Name = row.Field<string>("Name"),
				Table = (row.Field<string>("Schema") != null && row.Field<string>("Schema") != "dbo" ? row.Field<string>("Schema") + "." : "") + row.Field<string>("Table"),
				Schema = row.Field<string>("Schema"),
				Parent = row.Field<string>("Parent"),
				IsNullable = row.Field<bool>("IsNullable"),
				OriginalColumnName = row.Field<string>("Column"),
				Column = row.Field<string>("Column"),
				ParentColumn = row.Field<string>("ParentColumn"),
				CSharpType = MapCsharpType(row.Field<string>("ColumnType")),
				ChildCSharpType = MapCsharpType(row.Field<string>("ChildType")),
				ChildColumnIsPrimaryKey = row.Field<bool>("IsPrimaryKey")
            }).ToList();
        }
        
		public override List<DbParent> GetParents(string connectionString, string database, string tableName, string schema = "dbo")
        {
            string sql = string.Format(@"
                WITH indexCTE AS
                (
                    SELECT 
                    ic.column_id,
                    ic.index_column_id,
					          ic.object_id,
                    OBJECT_NAME(ic.object_id) name
                    FROM sys.indexes idx
                    join sys.index_columns ic ON idx.index_id = ic.index_id AND idx.object_id = ic.object_id
                    WHERE idx.is_primary_key=1
                )
				select OBJECT_NAME(fk.object_id) Name, 
					sc.name [Schema],
					OBJECT_NAME(fk.referenced_object_id) Parent, 
					pCol.Name ParentColumn, 
					Object_Name(fk.parent_object_id) [Table], 
					col.Name [Column],
					CAST(CASE WHEN indexCTE.column_id IS NULL THEN 0 ELSE 1 END AS BIT) IsPrimaryKey,
					col.is_nullable IsNullable, 
					pSysType.name ColumnType
				from sys.foreign_keys fk
				join sys.objects obj on obj.object_id = fk.object_id
				join sys.schemas sc on sc.schema_id = obj.schema_id
				join sys.foreign_key_columns fkc on fkc.constraint_object_id = fk.object_id
				join sys.columns pCol on pCol.column_id = fkc.constraint_column_id  and pCol.object_id = fk.referenced_object_id
				join sys.columns col on col.column_id = fkc.parent_column_id and col.object_id = fk.parent_object_id
				join sys.systypes pSysType on pSysType.xusertype = pCol.system_type_id
				left outer join indexCTE ON pCol.column_id=indexCTE.column_id AND pCol.object_id=indexCTE.object_id
				where fk.parent_object_id = OBJECT_ID(@tableName)", database);

            SqlParameter param = new SqlParameter("@tableName", SqlDbType.NVarChar, 100) { Value = string.Format("{0}.{1}.{2}", database, schema, tableName) };
            DataTable dt = GetDataTable(connectionString, sql, param);

            return dt.Rows.Cast<DataRow>().Select(row => new DbParent()
            {
				Name = row.Field<string>("Name"),
				Schema = row.Field<string>("Schema"),
				Table = (row.Field<string>("Schema") != null && row.Field<string>("Schema") != "dbo" ? row.Field<string>("Schema") + "." : "") + row.Field<string>("Table"),
				Parent = row.Field<string>("Parent"),
				ParentClassFieldName = row.Field<string>("Parent"),
				IsNullable = row.Field<bool>("IsNullable"),
				OriginalColumnName = row.Field<string>("Column"),
				Column = row.Field<string>("Column"),
				ParentColumn = row.Field<string>("ParentColumn"),
				CSharpType = MapCsharpType(row.Field<string>("ColumnType")),
				ParentColumnIsPrimaryKey = row.Field<bool>("IsPrimaryKey")
            }).ToList();
        }

        DataTable GetDataTable(string connectionString, string commandText, params SqlParameter[] parms)
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand command = connection.CreateCommand();
                command.CommandText = commandText;
                command.Parameters.AddRange(parms);
                SqlDataAdapter adapter = new SqlDataAdapter(command);

                DataTable dt = new DataTable();
                adapter.Fill(dt);

                return dt;
            }
        }

		public override string MapCsharpType(string dbtype)
        {
            if (string.IsNullOrEmpty(dbtype)) return dbtype;
            dbtype = dbtype.ToLower();
            string csharpType = "object";
            switch (dbtype)
            {
                case "bigint": csharpType = "long"; break;
                case "binary": csharpType = "byte[]"; break;
                case "bit": csharpType = "bool"; break;
                case "char": csharpType = "string"; break;
                case "date": csharpType = "DateTime"; break;
                case "datetime": csharpType = "DateTime"; break;
                case "datetime2": csharpType = "DateTime"; break;
                case "datetimeoffset": csharpType = "DateTimeOffset"; break;
                case "decimal": csharpType = "decimal"; break;
                case "float": csharpType = "double"; break;
                case "image": csharpType = "byte[]"; break;
                case "int": csharpType = "int"; break;
                case "money": csharpType = "decimal"; break;
                case "nchar": csharpType = "string"; break;
                case "ntext": csharpType = "string"; break;
                case "numeric": csharpType = "decimal"; break;
                case "nvarchar": csharpType = "string"; break;
                case "real": csharpType = "Single"; break;
                case "smalldatetime": csharpType = "DateTime"; break;
                case "smallint": csharpType = "short"; break;
                case "smallmoney": csharpType = "decimal"; break;
                case "sql_variant": csharpType = "object"; break;
                case "sysname": csharpType = "object"; break;
                case "text": csharpType = "string"; break;
                case "time": csharpType = "TimeSpan"; break;
                case "timestamp": csharpType = "byte[]"; break;
                case "tinyint": csharpType = "byte"; break;
                case "uniqueidentifier": csharpType = "Guid"; break;
                case "varbinary": csharpType = "byte[]"; break;
                case "varchar": csharpType = "string"; break;
                case "xml": csharpType = "string"; break;
                case "hierarchyid": csharpType="Microsoft.SqlServer.Types.SqlHierarchyId"; break;
                default: csharpType = "object"; break;
            }
            return csharpType;
        }
           
        public override Type MapCommonType(string dbtype)
        {
            if (string.IsNullOrEmpty(dbtype)) return Type.Missing.GetType();
            dbtype = dbtype.ToLower();
            Type commonType = typeof(object);
            switch (dbtype)
            {
                case "bigint": commonType = typeof(long); break;
                case "binary": commonType = typeof(byte[]); break;
                case "bit": commonType = typeof(bool); break;
                case "char": commonType = typeof(string); break;
                case "date": commonType = typeof(DateTime); break;
                case "datetime": commonType = typeof(DateTime); break;
                case "datetime2": commonType = typeof(DateTime); break;
                case "datetimeoffset": commonType = typeof(DateTimeOffset); break;
                case "decimal": commonType = typeof(decimal); break;
                case "float": commonType = typeof(double); break;
                case "image": commonType = typeof(byte[]); break;
                case "int": commonType = typeof(int); break;
                case "money": commonType = typeof(decimal); break;
                case "nchar": commonType = typeof(string); break;
                case "ntext": commonType = typeof(string); break;
                case "numeric": commonType = typeof(decimal); break;
                case "nvarchar": commonType = typeof(string); break;
                case "real": commonType = typeof(Single); break;
                case "smalldatetime": commonType = typeof(DateTime); break;
                case "smallint": commonType = typeof(short); break;
                case "smallmoney": commonType = typeof(decimal); break;
                case "sql_variant": commonType = typeof(object); break;
                case "sysname": commonType = typeof(object); break;
                case "text": commonType = typeof(string); break;
                case "time": commonType = typeof(TimeSpan); break;
                case "timestamp": commonType = typeof(byte[]); break;
                case "tinyint": commonType = typeof(byte); break;
                case "uniqueidentifier": commonType = typeof(Guid); break;
                case "varbinary": commonType = typeof(byte[]); break;
                case "varchar": commonType = typeof(string); break;
                case "xml": commonType = typeof(string); break;
                default: commonType = typeof(object); break;
            }
            return commonType;
        }
    }
#>