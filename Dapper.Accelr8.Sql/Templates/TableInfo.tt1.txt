



using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum PersonAddressColumnNames
	{	
		Id, 	
		AddressLine1, 	
		AddressLine2, 	
		City, 	
		StateProvinceID, 	
		PostalCode, 	
		SpatialLocation, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum PersonAddressCascadeNames
	{	
		personbusinessentityaddress, 	
		salessalesorderheader, 	
		
		personstateprovince_p, 	}

	public class PersonAddressTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public PersonAddressTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = PersonAddressColumnNames.AddressID.ToString();
			Schema = "Person.Address";
			TableName = "Person.Address";
			TableAlias = "personaddress";
			ColumnNames = typeof(PersonAddressColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_Address_StateProvince_StateProvinceID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, PersonStateProvince>("PersonStateProvince")),
			TableName = "Person.StateProvince",
			Alias = TableAlias + "_" + "PersonStateProvince",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, PersonStateProvince>("PersonStateProvince"));
					var st = (entity as PersonAddress);

					if (st == null || row == null)
						return st;

					if (row.StateProvinceID == null || row.StateProvinceID == default(int))
						return st;

					st.PersonStateProvince = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = PersonStateProvinceColumnNames.StateProvinceID.ToString(),
					Operator = Operator.Equals,
					ParentField = PersonAddressColumnNames.StateProvinceID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum PersonAddressTypeColumnNames
	{	
		Id, 	
		Name, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum PersonAddressTypeCascadeNames
	{	
		personbusinessentityaddress, 	
		}

	public class PersonAddressTypeTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public PersonAddressTypeTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = PersonAddressTypeColumnNames.AddressTypeID.ToString();
			Schema = "Person.AddressType";
			TableName = "Person.AddressType";
			TableAlias = "personaddresstype";
			ColumnNames = typeof(PersonAddressTypeColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum AWBuildVersionColumnNames
	{	
		Id, 	
		Database_spc_Version, 	
		VersionDate, 	
		ModifiedDate, 	
	}

	public enum AWBuildVersionCascadeNames
	{	
		}

	public class AWBuildVersionTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public AWBuildVersionTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = AWBuildVersionColumnNames.SystemInformationID.ToString();
			Schema = "AWBuildVersion";
			TableName = "AWBuildVersion";
			TableAlias = "awbuildversion";
			ColumnNames = typeof(AWBuildVersionColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum ProductionBillOfMaterialColumnNames
	{	
		Id, 	
		ProductAssemblyID, 	
		ComponentID, 	
		StartDate, 	
		EndDate, 	
		UnitMeasureCode, 	
		BOMLevel, 	
		PerAssemblyQty, 	
		ModifiedDate, 	
	}

	public enum ProductionBillOfMaterialCascadeNames
	{	
		
		productionunitmeasure_p, 	
		productionproduct_p, 	}

	public class ProductionBillOfMaterialTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public ProductionBillOfMaterialTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = ProductionBillOfMaterialColumnNames.BillOfMaterialsID.ToString();
			Schema = "Production.BillOfMaterials";
			TableName = "Production.BillOfMaterials";
			TableAlias = "productionbillofmaterial";
			ColumnNames = typeof(ProductionBillOfMaterialColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_BillOfMaterials_UnitMeasure_UnitMeasureCode
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<string, ProductionUnitMeasure>("ProductionUnitMeasure")),
			TableName = "Production.UnitMeasure",
			Alias = TableAlias + "_" + "ProductionUnitMeasure",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<string, ProductionUnitMeasure>("ProductionUnitMeasure"));
					var st = (entity as ProductionBillOfMaterial);

					if (st == null || row == null)
						return st;

					if (row.UnitMeasureCode == null || row.UnitMeasureCode == default(string))
						return st;

					st.ProductionUnitMeasure = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = ProductionUnitMeasureColumnNames.UnitMeasureCode.ToString(),
					Operator = Operator.Equals,
					ParentField = ProductionBillOfMaterialColumnNames.UnitMeasureCode.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_BillOfMaterials_Product_ComponentID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, ProductionProduct>("ProductionProduct")),
			TableName = "Production.Product",
			Alias = TableAlias + "_" + "ProductionProduct",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, ProductionProduct>("ProductionProduct"));
					var st = (entity as ProductionBillOfMaterial);

					if (st == null || row == null)
						return st;

					if (row.ProductID == null || row.ProductID == default(int))
						return st;

					st.ProductionProduct = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = ProductionProductColumnNames.ProductID.ToString(),
					Operator = Operator.Equals,
					ParentField = ProductionBillOfMaterialColumnNames.ComponentID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_BillOfMaterials_Product_ProductAssemblyID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, ProductionProduct>("ProductionProduct")),
			TableName = "Production.Product",
			Alias = TableAlias + "_" + "ProductionProduct",
			Outer = true,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, ProductionProduct>("ProductionProduct"));
					var st = (entity as ProductionBillOfMaterial);

					if (st == null || row == null)
						return st;

					if (row.ProductID == null || row.ProductID == default(int))
						return st;

					st.ProductionProduct = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = ProductionProductColumnNames.ProductID.ToString(),
					Operator = Operator.Equals,
					ParentField = ProductionBillOfMaterialColumnNames.ProductAssemblyID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum PersonBusinessEntityColumnNames
	{	
		Id, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum PersonBusinessEntityCascadeNames
	{	
		salesstore, 	
		personbusinessentityaddress, 	
		personbusinessentitycontact, 	
		purchasingvendor, 	
		personperson, 	
		}

	public class PersonBusinessEntityTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public PersonBusinessEntityTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = PersonBusinessEntityColumnNames.BusinessEntityID.ToString();
			Schema = "Person.BusinessEntity";
			TableName = "Person.BusinessEntity";
			TableAlias = "personbusinessentity";
			ColumnNames = typeof(PersonBusinessEntityColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum PersonBusinessEntityAddressColumnNames
	{	
		Id, 	
		Id, 	
		Id, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum PersonBusinessEntityAddressCascadeNames
	{	
		
		personaddress_p, 	
		personaddresstype_p, 	
		personbusinessentity_p, 	}

	public class PersonBusinessEntityAddressTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public PersonBusinessEntityAddressTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = PersonBusinessEntityAddressColumnNames.BusinessEntityID.ToString();
			Schema = "Person.BusinessEntityAddress";
			TableName = "Person.BusinessEntityAddress";
			TableAlias = "personbusinessentityaddress";
			ColumnNames = typeof(PersonBusinessEntityAddressColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_BusinessEntityAddress_Address_AddressID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, PersonAddress>("PersonAddress")),
			TableName = "Person.Address",
			Alias = TableAlias + "_" + "PersonAddress",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, PersonAddress>("PersonAddress"));
					var st = (entity as PersonBusinessEntityAddress);

					if (st == null || row == null)
						return st;

					if (row.AddressID == null || row.AddressID == default(int))
						return st;

					st.PersonAddress = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = PersonAddressColumnNames.AddressID.ToString(),
					Operator = Operator.Equals,
					ParentField = PersonBusinessEntityAddressColumnNames.AddressID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_BusinessEntityAddress_AddressType_AddressTypeID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, PersonAddressType>("PersonAddressType")),
			TableName = "Person.AddressType",
			Alias = TableAlias + "_" + "PersonAddressType",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, PersonAddressType>("PersonAddressType"));
					var st = (entity as PersonBusinessEntityAddress);

					if (st == null || row == null)
						return st;

					if (row.AddressTypeID == null || row.AddressTypeID == default(int))
						return st;

					st.PersonAddressType = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = PersonAddressTypeColumnNames.AddressTypeID.ToString(),
					Operator = Operator.Equals,
					ParentField = PersonBusinessEntityAddressColumnNames.AddressTypeID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, PersonBusinessEntity>("PersonBusinessEntity")),
			TableName = "Person.BusinessEntity",
			Alias = TableAlias + "_" + "PersonBusinessEntity",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, PersonBusinessEntity>("PersonBusinessEntity"));
					var st = (entity as PersonBusinessEntityAddress);

					if (st == null || row == null)
						return st;

					if (row.BusinessEntityID == null || row.BusinessEntityID == default(int))
						return st;

					st.PersonBusinessEntity = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = PersonBusinessEntityColumnNames.BusinessEntityID.ToString(),
					Operator = Operator.Equals,
					ParentField = PersonBusinessEntityAddressColumnNames.BusinessEntityID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum PersonBusinessEntityContactColumnNames
	{	
		Id, 	
		Id, 	
		Id, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum PersonBusinessEntityContactCascadeNames
	{	
		
		personbusinessentity_p, 	
		personcontacttype_p, 	
		personperson_p, 	}

	public class PersonBusinessEntityContactTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public PersonBusinessEntityContactTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = PersonBusinessEntityContactColumnNames.BusinessEntityID.ToString();
			Schema = "Person.BusinessEntityContact";
			TableName = "Person.BusinessEntityContact";
			TableAlias = "personbusinessentitycontact";
			ColumnNames = typeof(PersonBusinessEntityContactColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_BusinessEntityContact_BusinessEntity_BusinessEntityID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, PersonBusinessEntity>("PersonBusinessEntity")),
			TableName = "Person.BusinessEntity",
			Alias = TableAlias + "_" + "PersonBusinessEntity",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, PersonBusinessEntity>("PersonBusinessEntity"));
					var st = (entity as PersonBusinessEntityContact);

					if (st == null || row == null)
						return st;

					if (row.BusinessEntityID == null || row.BusinessEntityID == default(int))
						return st;

					st.PersonBusinessEntity = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = PersonBusinessEntityColumnNames.BusinessEntityID.ToString(),
					Operator = Operator.Equals,
					ParentField = PersonBusinessEntityContactColumnNames.BusinessEntityID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_BusinessEntityContact_ContactType_ContactTypeID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, PersonContactType>("PersonContactType")),
			TableName = "Person.ContactType",
			Alias = TableAlias + "_" + "PersonContactType",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, PersonContactType>("PersonContactType"));
					var st = (entity as PersonBusinessEntityContact);

					if (st == null || row == null)
						return st;

					if (row.ContactTypeID == null || row.ContactTypeID == default(int))
						return st;

					st.PersonContactType = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = PersonContactTypeColumnNames.ContactTypeID.ToString(),
					Operator = Operator.Equals,
					ParentField = PersonBusinessEntityContactColumnNames.ContactTypeID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_BusinessEntityContact_Person_PersonID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, PersonPerson>("PersonPerson")),
			TableName = "Person.Person",
			Alias = TableAlias + "_" + "PersonPerson",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, PersonPerson>("PersonPerson"));
					var st = (entity as PersonBusinessEntityContact);

					if (st == null || row == null)
						return st;

					if (row.BusinessEntityID == null || row.BusinessEntityID == default(int))
						return st;

					st.PersonPerson = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = PersonPersonColumnNames.BusinessEntityID.ToString(),
					Operator = Operator.Equals,
					ParentField = PersonBusinessEntityContactColumnNames.PersonID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum PersonContactTypeColumnNames
	{	
		Id, 	
		Name, 	
		ModifiedDate, 	
	}

	public enum PersonContactTypeCascadeNames
	{	
		personbusinessentitycontact, 	
		}

	public class PersonContactTypeTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public PersonContactTypeTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = PersonContactTypeColumnNames.ContactTypeID.ToString();
			Schema = "Person.ContactType";
			TableName = "Person.ContactType";
			TableAlias = "personcontacttype";
			ColumnNames = typeof(PersonContactTypeColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum PersonCountryRegionColumnNames
	{	
		Id, 	
		Name, 	
		ModifiedDate, 	
	}

	public enum PersonCountryRegionCascadeNames
	{	
		personstateprovince, 	
		salescountryregioncurrency, 	
		salessalesterritory, 	
		}

	public class PersonCountryRegionTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public PersonCountryRegionTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = PersonCountryRegionColumnNames.CountryRegionCode.ToString();
			Schema = "Person.CountryRegion";
			TableName = "Person.CountryRegion";
			TableAlias = "personcountryregion";
			ColumnNames = typeof(PersonCountryRegionColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum SalesCountryRegionCurrencyColumnNames
	{	
		Id, 	
		Id, 	
		ModifiedDate, 	
	}

	public enum SalesCountryRegionCurrencyCascadeNames
	{	
		
		personcountryregion_p, 	
		salescurrency_p, 	}

	public class SalesCountryRegionCurrencyTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public SalesCountryRegionCurrencyTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = SalesCountryRegionCurrencyColumnNames.CountryRegionCode.ToString();
			Schema = "Sales.CountryRegionCurrency";
			TableName = "Sales.CountryRegionCurrency";
			TableAlias = "salescountryregioncurrency";
			ColumnNames = typeof(SalesCountryRegionCurrencyColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_CountryRegionCurrency_CountryRegion_CountryRegionCode
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<string, PersonCountryRegion>("PersonCountryRegion")),
			TableName = "Person.CountryRegion",
			Alias = TableAlias + "_" + "PersonCountryRegion",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<string, PersonCountryRegion>("PersonCountryRegion"));
					var st = (entity as SalesCountryRegionCurrency);

					if (st == null || row == null)
						return st;

					if (row.CountryRegionCode == null || row.CountryRegionCode == default(string))
						return st;

					st.PersonCountryRegion = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = PersonCountryRegionColumnNames.CountryRegionCode.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesCountryRegionCurrencyColumnNames.CountryRegionCode.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_CountryRegionCurrency_Currency_CurrencyCode
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<string, SalesCurrency>("SalesCurrency")),
			TableName = "Sales.Currency",
			Alias = TableAlias + "_" + "SalesCurrency",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<string, SalesCurrency>("SalesCurrency"));
					var st = (entity as SalesCountryRegionCurrency);

					if (st == null || row == null)
						return st;

					if (row.CurrencyCode == null || row.CurrencyCode == default(string))
						return st;

					st.SalesCurrency = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = SalesCurrencyColumnNames.CurrencyCode.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesCountryRegionCurrencyColumnNames.CurrencyCode.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum SalesCreditCardColumnNames
	{	
		Id, 	
		CardType, 	
		CardNumber, 	
		ExpMonth, 	
		ExpYear, 	
		ModifiedDate, 	
	}

	public enum SalesCreditCardCascadeNames
	{	
		salessalesorderheader, 	
		salespersoncreditcard, 	
		}

	public class SalesCreditCardTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public SalesCreditCardTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = SalesCreditCardColumnNames.CreditCardID.ToString();
			Schema = "Sales.CreditCard";
			TableName = "Sales.CreditCard";
			TableAlias = "salescreditcard";
			ColumnNames = typeof(SalesCreditCardColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum ProductionCultureColumnNames
	{	
		Id, 	
		Name, 	
		ModifiedDate, 	
	}

	public enum ProductionCultureCascadeNames
	{	
		productionproductmodelproductdescriptionculture, 	
		}

	public class ProductionCultureTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public ProductionCultureTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = ProductionCultureColumnNames.CultureID.ToString();
			Schema = "Production.Culture";
			TableName = "Production.Culture";
			TableAlias = "productionculture";
			ColumnNames = typeof(ProductionCultureColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum SalesCurrencyColumnNames
	{	
		Id, 	
		Name, 	
		ModifiedDate, 	
	}

	public enum SalesCurrencyCascadeNames
	{	
		salescountryregioncurrency, 	
		salescurrencyrate, 	
		}

	public class SalesCurrencyTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public SalesCurrencyTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = SalesCurrencyColumnNames.CurrencyCode.ToString();
			Schema = "Sales.Currency";
			TableName = "Sales.Currency";
			TableAlias = "salescurrency";
			ColumnNames = typeof(SalesCurrencyColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum SalesCurrencyRateColumnNames
	{	
		Id, 	
		CurrencyRateDate, 	
		FromCurrencyCode, 	
		ToCurrencyCode, 	
		AverageRate, 	
		EndOfDayRate, 	
		ModifiedDate, 	
	}

	public enum SalesCurrencyRateCascadeNames
	{	
		salessalesorderheader, 	
		
		salescurrency_p, 	}

	public class SalesCurrencyRateTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public SalesCurrencyRateTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = SalesCurrencyRateColumnNames.CurrencyRateID.ToString();
			Schema = "Sales.CurrencyRate";
			TableName = "Sales.CurrencyRate";
			TableAlias = "salescurrencyrate";
			ColumnNames = typeof(SalesCurrencyRateColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_CurrencyRate_Currency_FromCurrencyCode
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<string, SalesCurrency>("SalesCurrency")),
			TableName = "Sales.Currency",
			Alias = TableAlias + "_" + "SalesCurrency",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<string, SalesCurrency>("SalesCurrency"));
					var st = (entity as SalesCurrencyRate);

					if (st == null || row == null)
						return st;

					if (row.CurrencyCode == null || row.CurrencyCode == default(string))
						return st;

					st.SalesCurrency = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = SalesCurrencyColumnNames.CurrencyCode.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesCurrencyRateColumnNames.FromCurrencyCode.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_CurrencyRate_Currency_ToCurrencyCode
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<string, SalesCurrency>("SalesCurrency")),
			TableName = "Sales.Currency",
			Alias = TableAlias + "_" + "SalesCurrency",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<string, SalesCurrency>("SalesCurrency"));
					var st = (entity as SalesCurrencyRate);

					if (st == null || row == null)
						return st;

					if (row.CurrencyCode == null || row.CurrencyCode == default(string))
						return st;

					st.SalesCurrency = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = SalesCurrencyColumnNames.CurrencyCode.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesCurrencyRateColumnNames.ToCurrencyCode.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum SalesCustomerColumnNames
	{	
		Id, 	
		PersonID, 	
		StoreID, 	
		TerritoryID, 	
		AccountNumber, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum SalesCustomerCascadeNames
	{	
		salessalesorderheader, 	
		
		salesstore_p, 	
		personperson_p, 	
		salessalesterritory_p, 	}

	public class SalesCustomerTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public SalesCustomerTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = SalesCustomerColumnNames.CustomerID.ToString();
			Schema = "Sales.Customer";
			TableName = "Sales.Customer";
			TableAlias = "salescustomer";
			ColumnNames = typeof(SalesCustomerColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_Customer_Store_StoreID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, SalesStore>("SalesStore")),
			TableName = "Sales.Store",
			Alias = TableAlias + "_" + "SalesStore",
			Outer = true,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, SalesStore>("SalesStore"));
					var st = (entity as SalesCustomer);

					if (st == null || row == null)
						return st;

					if (row.BusinessEntityID == null || row.BusinessEntityID == default(int))
						return st;

					st.SalesStore = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = SalesStoreColumnNames.BusinessEntityID.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesCustomerColumnNames.StoreID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_Customer_Person_PersonID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, PersonPerson>("PersonPerson")),
			TableName = "Person.Person",
			Alias = TableAlias + "_" + "PersonPerson",
			Outer = true,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, PersonPerson>("PersonPerson"));
					var st = (entity as SalesCustomer);

					if (st == null || row == null)
						return st;

					if (row.BusinessEntityID == null || row.BusinessEntityID == default(int))
						return st;

					st.PersonPerson = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = PersonPersonColumnNames.BusinessEntityID.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesCustomerColumnNames.PersonID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_Customer_SalesTerritory_TerritoryID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, SalesSalesTerritory>("SalesSalesTerritory")),
			TableName = "Sales.SalesTerritory",
			Alias = TableAlias + "_" + "SalesSalesTerritory",
			Outer = true,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, SalesSalesTerritory>("SalesSalesTerritory"));
					var st = (entity as SalesCustomer);

					if (st == null || row == null)
						return st;

					if (row.TerritoryID == null || row.TerritoryID == default(int))
						return st;

					st.SalesSalesTerritory = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = SalesSalesTerritoryColumnNames.TerritoryID.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesCustomerColumnNames.TerritoryID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum DatabaseLogColumnNames
	{	
		Id, 	
		PostTime, 	
		DatabaseUser, 	
		Event, 	
		Schema, 	
		Object, 	
		TSQL, 	
		XmlEvent, 	
	}

	public enum DatabaseLogCascadeNames
	{	
		}

	public class DatabaseLogTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public DatabaseLogTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = DatabaseLogColumnNames.DatabaseLogID.ToString();
			Schema = "DatabaseLog";
			TableName = "DatabaseLog";
			TableAlias = "databaselog";
			ColumnNames = typeof(DatabaseLogColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum HumanResourcesDepartmentColumnNames
	{	
		Id, 	
		Name, 	
		GroupName, 	
		ModifiedDate, 	
	}

	public enum HumanResourcesDepartmentCascadeNames
	{	
		humanresourcesemployeedepartmenthistory, 	
		}

	public class HumanResourcesDepartmentTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public HumanResourcesDepartmentTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = HumanResourcesDepartmentColumnNames.DepartmentID.ToString();
			Schema = "HumanResources.Department";
			TableName = "HumanResources.Department";
			TableAlias = "humanresourcesdepartment";
			ColumnNames = typeof(HumanResourcesDepartmentColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum ProductionDocumentColumnNames
	{	
		Id, 	
		DocumentLevel, 	
		Title, 	
		Owner, 	
		FolderFlag, 	
		FileName, 	
		FileExtension, 	
		Revision, 	
		ChangeNumber, 	
		Status, 	
		DocumentSummary, 	
		Document, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum ProductionDocumentCascadeNames
	{	
		
		humanresourcesemployee_p, 	}

	public class ProductionDocumentTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public ProductionDocumentTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = ProductionDocumentColumnNames.DocumentNode.ToString();
			Schema = "Production.Document";
			TableName = "Production.Document";
			TableAlias = "productiondocument";
			ColumnNames = typeof(ProductionDocumentColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_Document_Employee_Owner
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, HumanResourcesEmployee>("HumanResourcesEmployee")),
			TableName = "HumanResources.Employee",
			Alias = TableAlias + "_" + "HumanResourcesEmployee",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, HumanResourcesEmployee>("HumanResourcesEmployee"));
					var st = (entity as ProductionDocument);

					if (st == null || row == null)
						return st;

					if (row.BusinessEntityID == null || row.BusinessEntityID == default(int))
						return st;

					st.HumanResourcesEmployee = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = HumanResourcesEmployeeColumnNames.BusinessEntityID.ToString(),
					Operator = Operator.Equals,
					ParentField = ProductionDocumentColumnNames.Owner.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum PersonEmailAddressColumnNames
	{	
		Id, 	
		Id, 	
		EmailAddress, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum PersonEmailAddressCascadeNames
	{	
		
		personperson_p, 	}

	public class PersonEmailAddressTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public PersonEmailAddressTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = PersonEmailAddressColumnNames.BusinessEntityID.ToString();
			Schema = "Person.EmailAddress";
			TableName = "Person.EmailAddress";
			TableAlias = "personemailaddress";
			ColumnNames = typeof(PersonEmailAddressColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_EmailAddress_Person_BusinessEntityID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, PersonPerson>("PersonPerson")),
			TableName = "Person.Person",
			Alias = TableAlias + "_" + "PersonPerson",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, PersonPerson>("PersonPerson"));
					var st = (entity as PersonEmailAddress);

					if (st == null || row == null)
						return st;

					if (row.BusinessEntityID == null || row.BusinessEntityID == default(int))
						return st;

					st.PersonPerson = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = PersonPersonColumnNames.BusinessEntityID.ToString(),
					Operator = Operator.Equals,
					ParentField = PersonEmailAddressColumnNames.BusinessEntityID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum HumanResourcesEmployeeColumnNames
	{	
		Id, 	
		NationalIDNumber, 	
		LoginID, 	
		OrganizationNode, 	
		OrganizationLevel, 	
		JobTitle, 	
		BirthDate, 	
		MaritalStatus, 	
		Gender, 	
		HireDate, 	
		SalariedFlag, 	
		VacationHours, 	
		SickLeaveHours, 	
		CurrentFlag, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum HumanResourcesEmployeeCascadeNames
	{	
		purchasingpurchaseorderheader, 	
		productiondocument, 	
		humanresourcesemployeedepartmenthistory, 	
		humanresourcesemployeepayhistory, 	
		salessalesperson, 	
		humanresourcesjobcandidate, 	
		
		personperson_p, 	}

	public class HumanResourcesEmployeeTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public HumanResourcesEmployeeTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = HumanResourcesEmployeeColumnNames.BusinessEntityID.ToString();
			Schema = "HumanResources.Employee";
			TableName = "HumanResources.Employee";
			TableAlias = "humanresourcesemployee";
			ColumnNames = typeof(HumanResourcesEmployeeColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_Employee_Person_BusinessEntityID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, PersonPerson>("PersonPerson")),
			TableName = "Person.Person",
			Alias = TableAlias + "_" + "PersonPerson",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, PersonPerson>("PersonPerson"));
					var st = (entity as HumanResourcesEmployee);

					if (st == null || row == null)
						return st;

					if (row.BusinessEntityID == null || row.BusinessEntityID == default(int))
						return st;

					st.PersonPerson = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = PersonPersonColumnNames.BusinessEntityID.ToString(),
					Operator = Operator.Equals,
					ParentField = HumanResourcesEmployeeColumnNames.BusinessEntityID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum HumanResourcesEmployeeDepartmentHistoryColumnNames
	{	
		Id, 	
		Id, 	
		Id, 	
		Id, 	
		EndDate, 	
		ModifiedDate, 	
	}

	public enum HumanResourcesEmployeeDepartmentHistoryCascadeNames
	{	
		
		humanresourcesdepartment_p, 	
		humanresourcesemployee_p, 	
		humanresourcesshift_p, 	}

	public class HumanResourcesEmployeeDepartmentHistoryTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public HumanResourcesEmployeeDepartmentHistoryTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = HumanResourcesEmployeeDepartmentHistoryColumnNames.BusinessEntityID.ToString();
			Schema = "HumanResources.EmployeeDepartmentHistory";
			TableName = "HumanResources.EmployeeDepartmentHistory";
			TableAlias = "humanresourcesemployeedepartmenthistory";
			ColumnNames = typeof(HumanResourcesEmployeeDepartmentHistoryColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_EmployeeDepartmentHistory_Department_DepartmentID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<short, HumanResourcesDepartment>("HumanResourcesDepartment")),
			TableName = "HumanResources.Department",
			Alias = TableAlias + "_" + "HumanResourcesDepartment",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<short, HumanResourcesDepartment>("HumanResourcesDepartment"));
					var st = (entity as HumanResourcesEmployeeDepartmentHistory);

					if (st == null || row == null)
						return st;

					if (row.DepartmentID == null || row.DepartmentID == default(short))
						return st;

					st.HumanResourcesDepartment = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = HumanResourcesDepartmentColumnNames.DepartmentID.ToString(),
					Operator = Operator.Equals,
					ParentField = HumanResourcesEmployeeDepartmentHistoryColumnNames.DepartmentID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_EmployeeDepartmentHistory_Employee_BusinessEntityID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, HumanResourcesEmployee>("HumanResourcesEmployee")),
			TableName = "HumanResources.Employee",
			Alias = TableAlias + "_" + "HumanResourcesEmployee",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, HumanResourcesEmployee>("HumanResourcesEmployee"));
					var st = (entity as HumanResourcesEmployeeDepartmentHistory);

					if (st == null || row == null)
						return st;

					if (row.BusinessEntityID == null || row.BusinessEntityID == default(int))
						return st;

					st.HumanResourcesEmployee = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = HumanResourcesEmployeeColumnNames.BusinessEntityID.ToString(),
					Operator = Operator.Equals,
					ParentField = HumanResourcesEmployeeDepartmentHistoryColumnNames.BusinessEntityID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_EmployeeDepartmentHistory_Shift_ShiftID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<byte, HumanResourcesShift>("HumanResourcesShift")),
			TableName = "HumanResources.Shift",
			Alias = TableAlias + "_" + "HumanResourcesShift",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<byte, HumanResourcesShift>("HumanResourcesShift"));
					var st = (entity as HumanResourcesEmployeeDepartmentHistory);

					if (st == null || row == null)
						return st;

					if (row.ShiftID == null || row.ShiftID == default(byte))
						return st;

					st.HumanResourcesShift = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = HumanResourcesShiftColumnNames.ShiftID.ToString(),
					Operator = Operator.Equals,
					ParentField = HumanResourcesEmployeeDepartmentHistoryColumnNames.ShiftID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum HumanResourcesEmployeePayHistoryColumnNames
	{	
		Id, 	
		Id, 	
		Rate, 	
		PayFrequency, 	
		ModifiedDate, 	
	}

	public enum HumanResourcesEmployeePayHistoryCascadeNames
	{	
		
		humanresourcesemployee_p, 	}

	public class HumanResourcesEmployeePayHistoryTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public HumanResourcesEmployeePayHistoryTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = HumanResourcesEmployeePayHistoryColumnNames.BusinessEntityID.ToString();
			Schema = "HumanResources.EmployeePayHistory";
			TableName = "HumanResources.EmployeePayHistory";
			TableAlias = "humanresourcesemployeepayhistory";
			ColumnNames = typeof(HumanResourcesEmployeePayHistoryColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_EmployeePayHistory_Employee_BusinessEntityID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, HumanResourcesEmployee>("HumanResourcesEmployee")),
			TableName = "HumanResources.Employee",
			Alias = TableAlias + "_" + "HumanResourcesEmployee",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, HumanResourcesEmployee>("HumanResourcesEmployee"));
					var st = (entity as HumanResourcesEmployeePayHistory);

					if (st == null || row == null)
						return st;

					if (row.BusinessEntityID == null || row.BusinessEntityID == default(int))
						return st;

					st.HumanResourcesEmployee = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = HumanResourcesEmployeeColumnNames.BusinessEntityID.ToString(),
					Operator = Operator.Equals,
					ParentField = HumanResourcesEmployeePayHistoryColumnNames.BusinessEntityID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum ErrorLogColumnNames
	{	
		Id, 	
		ErrorTime, 	
		UserName, 	
		ErrorNumber, 	
		ErrorSeverity, 	
		ErrorState, 	
		ErrorProcedure, 	
		ErrorLine, 	
		ErrorMessage, 	
	}

	public enum ErrorLogCascadeNames
	{	
		}

	public class ErrorLogTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public ErrorLogTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = ErrorLogColumnNames.ErrorLogID.ToString();
			Schema = "ErrorLog";
			TableName = "ErrorLog";
			TableAlias = "errorlog";
			ColumnNames = typeof(ErrorLogColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum ProductionIllustrationColumnNames
	{	
		Id, 	
		Diagram, 	
		ModifiedDate, 	
	}

	public enum ProductionIllustrationCascadeNames
	{	
		productionproductmodelillustration, 	
		}

	public class ProductionIllustrationTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public ProductionIllustrationTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = ProductionIllustrationColumnNames.IllustrationID.ToString();
			Schema = "Production.Illustration";
			TableName = "Production.Illustration";
			TableAlias = "productionillustration";
			ColumnNames = typeof(ProductionIllustrationColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum HumanResourcesJobCandidateColumnNames
	{	
		Id, 	
		BusinessEntityID, 	
		Resume, 	
		ModifiedDate, 	
	}

	public enum HumanResourcesJobCandidateCascadeNames
	{	
		
		humanresourcesemployee_p, 	}

	public class HumanResourcesJobCandidateTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public HumanResourcesJobCandidateTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = HumanResourcesJobCandidateColumnNames.JobCandidateID.ToString();
			Schema = "HumanResources.JobCandidate";
			TableName = "HumanResources.JobCandidate";
			TableAlias = "humanresourcesjobcandidate";
			ColumnNames = typeof(HumanResourcesJobCandidateColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_JobCandidate_Employee_BusinessEntityID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, HumanResourcesEmployee>("HumanResourcesEmployee")),
			TableName = "HumanResources.Employee",
			Alias = TableAlias + "_" + "HumanResourcesEmployee",
			Outer = true,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, HumanResourcesEmployee>("HumanResourcesEmployee"));
					var st = (entity as HumanResourcesJobCandidate);

					if (st == null || row == null)
						return st;

					if (row.BusinessEntityID == null || row.BusinessEntityID == default(int))
						return st;

					st.HumanResourcesEmployee = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = HumanResourcesEmployeeColumnNames.BusinessEntityID.ToString(),
					Operator = Operator.Equals,
					ParentField = HumanResourcesJobCandidateColumnNames.BusinessEntityID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum ProductionLocationColumnNames
	{	
		Id, 	
		Name, 	
		CostRate, 	
		Availability, 	
		ModifiedDate, 	
	}

	public enum ProductionLocationCascadeNames
	{	
		productionproductinventory, 	
		productionworkorderrouting, 	
		}

	public class ProductionLocationTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public ProductionLocationTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = ProductionLocationColumnNames.LocationID.ToString();
			Schema = "Production.Location";
			TableName = "Production.Location";
			TableAlias = "productionlocation";
			ColumnNames = typeof(ProductionLocationColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum PersonPasswordColumnNames
	{	
		Id, 	
		PasswordHash, 	
		PasswordSalt, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum PersonPasswordCascadeNames
	{	
		
		personperson_p, 	}

	public class PersonPasswordTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public PersonPasswordTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = PersonPasswordColumnNames.BusinessEntityID.ToString();
			Schema = "Person.Password";
			TableName = "Person.Password";
			TableAlias = "personpassword";
			ColumnNames = typeof(PersonPasswordColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_Password_Person_BusinessEntityID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, PersonPerson>("PersonPerson")),
			TableName = "Person.Person",
			Alias = TableAlias + "_" + "PersonPerson",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, PersonPerson>("PersonPerson"));
					var st = (entity as PersonPassword);

					if (st == null || row == null)
						return st;

					if (row.BusinessEntityID == null || row.BusinessEntityID == default(int))
						return st;

					st.PersonPerson = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = PersonPersonColumnNames.BusinessEntityID.ToString(),
					Operator = Operator.Equals,
					ParentField = PersonPasswordColumnNames.BusinessEntityID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum PersonPersonColumnNames
	{	
		Id, 	
		PersonType, 	
		NameStyle, 	
		Title, 	
		FirstName, 	
		MiddleName, 	
		LastName, 	
		Suffix, 	
		EmailPromotion, 	
		AdditionalContactInfo, 	
		Demographics, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum PersonPersonCascadeNames
	{	
		personbusinessentitycontact, 	
		salescustomer, 	
		personemailaddress, 	
		humanresourcesemployee, 	
		personpassword, 	
		salespersoncreditcard, 	
		personpersonphone, 	
		
		personbusinessentity_p, 	}

	public class PersonPersonTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public PersonPersonTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = PersonPersonColumnNames.BusinessEntityID.ToString();
			Schema = "Person.Person";
			TableName = "Person.Person";
			TableAlias = "personperson";
			ColumnNames = typeof(PersonPersonColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_Person_BusinessEntity_BusinessEntityID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, PersonBusinessEntity>("PersonBusinessEntity")),
			TableName = "Person.BusinessEntity",
			Alias = TableAlias + "_" + "PersonBusinessEntity",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, PersonBusinessEntity>("PersonBusinessEntity"));
					var st = (entity as PersonPerson);

					if (st == null || row == null)
						return st;

					if (row.BusinessEntityID == null || row.BusinessEntityID == default(int))
						return st;

					st.PersonBusinessEntity = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = PersonBusinessEntityColumnNames.BusinessEntityID.ToString(),
					Operator = Operator.Equals,
					ParentField = PersonPersonColumnNames.BusinessEntityID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum SalesPersonCreditCardColumnNames
	{	
		Id, 	
		Id, 	
		ModifiedDate, 	
	}

	public enum SalesPersonCreditCardCascadeNames
	{	
		
		salescreditcard_p, 	
		personperson_p, 	}

	public class SalesPersonCreditCardTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public SalesPersonCreditCardTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = SalesPersonCreditCardColumnNames.BusinessEntityID.ToString();
			Schema = "Sales.PersonCreditCard";
			TableName = "Sales.PersonCreditCard";
			TableAlias = "salespersoncreditcard";
			ColumnNames = typeof(SalesPersonCreditCardColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_PersonCreditCard_CreditCard_CreditCardID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, SalesCreditCard>("SalesCreditCard")),
			TableName = "Sales.CreditCard",
			Alias = TableAlias + "_" + "SalesCreditCard",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, SalesCreditCard>("SalesCreditCard"));
					var st = (entity as SalesPersonCreditCard);

					if (st == null || row == null)
						return st;

					if (row.CreditCardID == null || row.CreditCardID == default(int))
						return st;

					st.SalesCreditCard = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = SalesCreditCardColumnNames.CreditCardID.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesPersonCreditCardColumnNames.CreditCardID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_PersonCreditCard_Person_BusinessEntityID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, PersonPerson>("PersonPerson")),
			TableName = "Person.Person",
			Alias = TableAlias + "_" + "PersonPerson",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, PersonPerson>("PersonPerson"));
					var st = (entity as SalesPersonCreditCard);

					if (st == null || row == null)
						return st;

					if (row.BusinessEntityID == null || row.BusinessEntityID == default(int))
						return st;

					st.PersonPerson = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = PersonPersonColumnNames.BusinessEntityID.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesPersonCreditCardColumnNames.BusinessEntityID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum PersonPersonPhoneColumnNames
	{	
		Id, 	
		Id, 	
		Id, 	
		ModifiedDate, 	
	}

	public enum PersonPersonPhoneCascadeNames
	{	
		
		personperson_p, 	
		personphonenumbertype_p, 	}

	public class PersonPersonPhoneTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public PersonPersonPhoneTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = PersonPersonPhoneColumnNames.BusinessEntityID.ToString();
			Schema = "Person.PersonPhone";
			TableName = "Person.PersonPhone";
			TableAlias = "personpersonphone";
			ColumnNames = typeof(PersonPersonPhoneColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_PersonPhone_Person_BusinessEntityID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, PersonPerson>("PersonPerson")),
			TableName = "Person.Person",
			Alias = TableAlias + "_" + "PersonPerson",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, PersonPerson>("PersonPerson"));
					var st = (entity as PersonPersonPhone);

					if (st == null || row == null)
						return st;

					if (row.BusinessEntityID == null || row.BusinessEntityID == default(int))
						return st;

					st.PersonPerson = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = PersonPersonColumnNames.BusinessEntityID.ToString(),
					Operator = Operator.Equals,
					ParentField = PersonPersonPhoneColumnNames.BusinessEntityID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, PersonPhoneNumberType>("PersonPhoneNumberType")),
			TableName = "Person.PhoneNumberType",
			Alias = TableAlias + "_" + "PersonPhoneNumberType",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, PersonPhoneNumberType>("PersonPhoneNumberType"));
					var st = (entity as PersonPersonPhone);

					if (st == null || row == null)
						return st;

					if (row.PhoneNumberTypeID == null || row.PhoneNumberTypeID == default(int))
						return st;

					st.PersonPhoneNumberType = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = PersonPhoneNumberTypeColumnNames.PhoneNumberTypeID.ToString(),
					Operator = Operator.Equals,
					ParentField = PersonPersonPhoneColumnNames.PhoneNumberTypeID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum PersonPhoneNumberTypeColumnNames
	{	
		Id, 	
		Name, 	
		ModifiedDate, 	
	}

	public enum PersonPhoneNumberTypeCascadeNames
	{	
		personpersonphone, 	
		}

	public class PersonPhoneNumberTypeTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public PersonPhoneNumberTypeTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = PersonPhoneNumberTypeColumnNames.PhoneNumberTypeID.ToString();
			Schema = "Person.PhoneNumberType";
			TableName = "Person.PhoneNumberType";
			TableAlias = "personphonenumbertype";
			ColumnNames = typeof(PersonPhoneNumberTypeColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum ProductionProductColumnNames
	{	
		Id, 	
		Name, 	
		ProductNumber, 	
		MakeFlag, 	
		FinishedGoodsFlag, 	
		Color, 	
		SafetyStockLevel, 	
		ReorderPoint, 	
		StandardCost, 	
		ListPrice, 	
		Size, 	
		SizeUnitMeasureCode, 	
		WeightUnitMeasureCode, 	
		Weight, 	
		DaysToManufacture, 	
		ProductLine, 	
		Class, 	
		Style, 	
		ProductSubcategoryID, 	
		ProductModelID, 	
		SellStartDate, 	
		SellEndDate, 	
		DiscontinuedDate, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum ProductionProductCascadeNames
	{	
		productionproductinventory, 	
		productionproductlistpricehistory, 	
		salesspecialofferproduct, 	
		productionproductproductphoto, 	
		productiontransactionhistory, 	
		productionproductreview, 	
		purchasingproductvendor, 	
		productionworkorder, 	
		purchasingpurchaseorderdetail, 	
		productionproductcosthistory, 	
		salesshoppingcartitem, 	
		productionproductdocument, 	
		
		productionproductmodel_p, 	
		productionproductsubcategory_p, 	
		productionunitmeasure_p, 	}

	public class ProductionProductTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public ProductionProductTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = ProductionProductColumnNames.ProductID.ToString();
			Schema = "Production.Product";
			TableName = "Production.Product";
			TableAlias = "productionproduct";
			ColumnNames = typeof(ProductionProductColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_Product_ProductModel_ProductModelID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, ProductionProductModel>("ProductionProductModel")),
			TableName = "Production.ProductModel",
			Alias = TableAlias + "_" + "ProductionProductModel",
			Outer = true,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, ProductionProductModel>("ProductionProductModel"));
					var st = (entity as ProductionProduct);

					if (st == null || row == null)
						return st;

					if (row.ProductModelID == null || row.ProductModelID == default(int))
						return st;

					st.ProductionProductModel = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = ProductionProductModelColumnNames.ProductModelID.ToString(),
					Operator = Operator.Equals,
					ParentField = ProductionProductColumnNames.ProductModelID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_Product_ProductSubcategory_ProductSubcategoryID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, ProductionProductSubcategory>("ProductionProductSubcategory")),
			TableName = "Production.ProductSubcategory",
			Alias = TableAlias + "_" + "ProductionProductSubcategory",
			Outer = true,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, ProductionProductSubcategory>("ProductionProductSubcategory"));
					var st = (entity as ProductionProduct);

					if (st == null || row == null)
						return st;

					if (row.ProductSubcategoryID == null || row.ProductSubcategoryID == default(int))
						return st;

					st.ProductionProductSubcategory = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = ProductionProductSubcategoryColumnNames.ProductSubcategoryID.ToString(),
					Operator = Operator.Equals,
					ParentField = ProductionProductColumnNames.ProductSubcategoryID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_Product_UnitMeasure_SizeUnitMeasureCode
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<string, ProductionUnitMeasure>("ProductionUnitMeasure")),
			TableName = "Production.UnitMeasure",
			Alias = TableAlias + "_" + "ProductionUnitMeasure",
			Outer = true,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<string, ProductionUnitMeasure>("ProductionUnitMeasure"));
					var st = (entity as ProductionProduct);

					if (st == null || row == null)
						return st;

					if (row.UnitMeasureCode == null || row.UnitMeasureCode == default(string))
						return st;

					st.ProductionUnitMeasure = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = ProductionUnitMeasureColumnNames.UnitMeasureCode.ToString(),
					Operator = Operator.Equals,
					ParentField = ProductionProductColumnNames.SizeUnitMeasureCode.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_Product_UnitMeasure_WeightUnitMeasureCode
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<string, ProductionUnitMeasure>("ProductionUnitMeasure")),
			TableName = "Production.UnitMeasure",
			Alias = TableAlias + "_" + "ProductionUnitMeasure",
			Outer = true,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<string, ProductionUnitMeasure>("ProductionUnitMeasure"));
					var st = (entity as ProductionProduct);

					if (st == null || row == null)
						return st;

					if (row.UnitMeasureCode == null || row.UnitMeasureCode == default(string))
						return st;

					st.ProductionUnitMeasure = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = ProductionUnitMeasureColumnNames.UnitMeasureCode.ToString(),
					Operator = Operator.Equals,
					ParentField = ProductionProductColumnNames.WeightUnitMeasureCode.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum ProductionProductCategoryColumnNames
	{	
		Id, 	
		Name, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum ProductionProductCategoryCascadeNames
	{	
		productionproductsubcategory, 	
		}

	public class ProductionProductCategoryTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public ProductionProductCategoryTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = ProductionProductCategoryColumnNames.ProductCategoryID.ToString();
			Schema = "Production.ProductCategory";
			TableName = "Production.ProductCategory";
			TableAlias = "productionproductcategory";
			ColumnNames = typeof(ProductionProductCategoryColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum ProductionProductCostHistoryColumnNames
	{	
		Id, 	
		Id, 	
		EndDate, 	
		StandardCost, 	
		ModifiedDate, 	
	}

	public enum ProductionProductCostHistoryCascadeNames
	{	
		
		productionproduct_p, 	}

	public class ProductionProductCostHistoryTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public ProductionProductCostHistoryTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = ProductionProductCostHistoryColumnNames.ProductID.ToString();
			Schema = "Production.ProductCostHistory";
			TableName = "Production.ProductCostHistory";
			TableAlias = "productionproductcosthistory";
			ColumnNames = typeof(ProductionProductCostHistoryColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_ProductCostHistory_Product_ProductID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, ProductionProduct>("ProductionProduct")),
			TableName = "Production.Product",
			Alias = TableAlias + "_" + "ProductionProduct",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, ProductionProduct>("ProductionProduct"));
					var st = (entity as ProductionProductCostHistory);

					if (st == null || row == null)
						return st;

					if (row.ProductID == null || row.ProductID == default(int))
						return st;

					st.ProductionProduct = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = ProductionProductColumnNames.ProductID.ToString(),
					Operator = Operator.Equals,
					ParentField = ProductionProductCostHistoryColumnNames.ProductID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum ProductionProductDescriptionColumnNames
	{	
		Id, 	
		Description, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum ProductionProductDescriptionCascadeNames
	{	
		productionproductmodelproductdescriptionculture, 	
		}

	public class ProductionProductDescriptionTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public ProductionProductDescriptionTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = ProductionProductDescriptionColumnNames.ProductDescriptionID.ToString();
			Schema = "Production.ProductDescription";
			TableName = "Production.ProductDescription";
			TableAlias = "productionproductdescription";
			ColumnNames = typeof(ProductionProductDescriptionColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum ProductionProductDocumentColumnNames
	{	
		Id, 	
		Id, 	
		ModifiedDate, 	
	}

	public enum ProductionProductDocumentCascadeNames
	{	
		
		productionproduct_p, 	}

	public class ProductionProductDocumentTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public ProductionProductDocumentTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = ProductionProductDocumentColumnNames.ProductID.ToString();
			Schema = "Production.ProductDocument";
			TableName = "Production.ProductDocument";
			TableAlias = "productionproductdocument";
			ColumnNames = typeof(ProductionProductDocumentColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_ProductDocument_Product_ProductID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, ProductionProduct>("ProductionProduct")),
			TableName = "Production.Product",
			Alias = TableAlias + "_" + "ProductionProduct",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, ProductionProduct>("ProductionProduct"));
					var st = (entity as ProductionProductDocument);

					if (st == null || row == null)
						return st;

					if (row.ProductID == null || row.ProductID == default(int))
						return st;

					st.ProductionProduct = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = ProductionProductColumnNames.ProductID.ToString(),
					Operator = Operator.Equals,
					ParentField = ProductionProductDocumentColumnNames.ProductID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum ProductionProductInventoryColumnNames
	{	
		Id, 	
		Id, 	
		Shelf, 	
		Bin, 	
		Quantity, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum ProductionProductInventoryCascadeNames
	{	
		
		productionlocation_p, 	
		productionproduct_p, 	}

	public class ProductionProductInventoryTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public ProductionProductInventoryTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = ProductionProductInventoryColumnNames.ProductID.ToString();
			Schema = "Production.ProductInventory";
			TableName = "Production.ProductInventory";
			TableAlias = "productionproductinventory";
			ColumnNames = typeof(ProductionProductInventoryColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_ProductInventory_Location_LocationID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<short, ProductionLocation>("ProductionLocation")),
			TableName = "Production.Location",
			Alias = TableAlias + "_" + "ProductionLocation",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<short, ProductionLocation>("ProductionLocation"));
					var st = (entity as ProductionProductInventory);

					if (st == null || row == null)
						return st;

					if (row.LocationID == null || row.LocationID == default(short))
						return st;

					st.ProductionLocation = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = ProductionLocationColumnNames.LocationID.ToString(),
					Operator = Operator.Equals,
					ParentField = ProductionProductInventoryColumnNames.LocationID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_ProductInventory_Product_ProductID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, ProductionProduct>("ProductionProduct")),
			TableName = "Production.Product",
			Alias = TableAlias + "_" + "ProductionProduct",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, ProductionProduct>("ProductionProduct"));
					var st = (entity as ProductionProductInventory);

					if (st == null || row == null)
						return st;

					if (row.ProductID == null || row.ProductID == default(int))
						return st;

					st.ProductionProduct = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = ProductionProductColumnNames.ProductID.ToString(),
					Operator = Operator.Equals,
					ParentField = ProductionProductInventoryColumnNames.ProductID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum ProductionProductListPriceHistoryColumnNames
	{	
		Id, 	
		Id, 	
		EndDate, 	
		ListPrice, 	
		ModifiedDate, 	
	}

	public enum ProductionProductListPriceHistoryCascadeNames
	{	
		
		productionproduct_p, 	}

	public class ProductionProductListPriceHistoryTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public ProductionProductListPriceHistoryTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = ProductionProductListPriceHistoryColumnNames.ProductID.ToString();
			Schema = "Production.ProductListPriceHistory";
			TableName = "Production.ProductListPriceHistory";
			TableAlias = "productionproductlistpricehistory";
			ColumnNames = typeof(ProductionProductListPriceHistoryColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_ProductListPriceHistory_Product_ProductID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, ProductionProduct>("ProductionProduct")),
			TableName = "Production.Product",
			Alias = TableAlias + "_" + "ProductionProduct",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, ProductionProduct>("ProductionProduct"));
					var st = (entity as ProductionProductListPriceHistory);

					if (st == null || row == null)
						return st;

					if (row.ProductID == null || row.ProductID == default(int))
						return st;

					st.ProductionProduct = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = ProductionProductColumnNames.ProductID.ToString(),
					Operator = Operator.Equals,
					ParentField = ProductionProductListPriceHistoryColumnNames.ProductID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum ProductionProductModelColumnNames
	{	
		Id, 	
		Name, 	
		CatalogDescription, 	
		Instructions, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum ProductionProductModelCascadeNames
	{	
		productionproductmodelillustration, 	
		productionproductmodelproductdescriptionculture, 	
		productionproduct, 	
		}

	public class ProductionProductModelTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public ProductionProductModelTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = ProductionProductModelColumnNames.ProductModelID.ToString();
			Schema = "Production.ProductModel";
			TableName = "Production.ProductModel";
			TableAlias = "productionproductmodel";
			ColumnNames = typeof(ProductionProductModelColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum ProductionProductModelIllustrationColumnNames
	{	
		Id, 	
		Id, 	
		ModifiedDate, 	
	}

	public enum ProductionProductModelIllustrationCascadeNames
	{	
		
		productionproductmodel_p, 	
		productionillustration_p, 	}

	public class ProductionProductModelIllustrationTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public ProductionProductModelIllustrationTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = ProductionProductModelIllustrationColumnNames.ProductModelID.ToString();
			Schema = "Production.ProductModelIllustration";
			TableName = "Production.ProductModelIllustration";
			TableAlias = "productionproductmodelillustration";
			ColumnNames = typeof(ProductionProductModelIllustrationColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_ProductModelIllustration_ProductModel_ProductModelID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, ProductionProductModel>("ProductionProductModel")),
			TableName = "Production.ProductModel",
			Alias = TableAlias + "_" + "ProductionProductModel",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, ProductionProductModel>("ProductionProductModel"));
					var st = (entity as ProductionProductModelIllustration);

					if (st == null || row == null)
						return st;

					if (row.ProductModelID == null || row.ProductModelID == default(int))
						return st;

					st.ProductionProductModel = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = ProductionProductModelColumnNames.ProductModelID.ToString(),
					Operator = Operator.Equals,
					ParentField = ProductionProductModelIllustrationColumnNames.ProductModelID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_ProductModelIllustration_Illustration_IllustrationID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, ProductionIllustration>("ProductionIllustration")),
			TableName = "Production.Illustration",
			Alias = TableAlias + "_" + "ProductionIllustration",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, ProductionIllustration>("ProductionIllustration"));
					var st = (entity as ProductionProductModelIllustration);

					if (st == null || row == null)
						return st;

					if (row.IllustrationID == null || row.IllustrationID == default(int))
						return st;

					st.ProductionIllustration = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = ProductionIllustrationColumnNames.IllustrationID.ToString(),
					Operator = Operator.Equals,
					ParentField = ProductionProductModelIllustrationColumnNames.IllustrationID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum ProductionProductModelProductDescriptionCultureColumnNames
	{	
		Id, 	
		Id, 	
		Id, 	
		ModifiedDate, 	
	}

	public enum ProductionProductModelProductDescriptionCultureCascadeNames
	{	
		
		productionproductmodel_p, 	
		productionculture_p, 	
		productionproductdescription_p, 	}

	public class ProductionProductModelProductDescriptionCultureTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public ProductionProductModelProductDescriptionCultureTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = ProductionProductModelProductDescriptionCultureColumnNames.ProductModelID.ToString();
			Schema = "Production.ProductModelProductDescriptionCulture";
			TableName = "Production.ProductModelProductDescriptionCulture";
			TableAlias = "productionproductmodelproductdescriptionculture";
			ColumnNames = typeof(ProductionProductModelProductDescriptionCultureColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, ProductionProductModel>("ProductionProductModel")),
			TableName = "Production.ProductModel",
			Alias = TableAlias + "_" + "ProductionProductModel",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, ProductionProductModel>("ProductionProductModel"));
					var st = (entity as ProductionProductModelProductDescriptionCulture);

					if (st == null || row == null)
						return st;

					if (row.ProductModelID == null || row.ProductModelID == default(int))
						return st;

					st.ProductionProductModel = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = ProductionProductModelColumnNames.ProductModelID.ToString(),
					Operator = Operator.Equals,
					ParentField = ProductionProductModelProductDescriptionCultureColumnNames.ProductModelID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_ProductModelProductDescriptionCulture_Culture_CultureID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<string, ProductionCulture>("ProductionCulture")),
			TableName = "Production.Culture",
			Alias = TableAlias + "_" + "ProductionCulture",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<string, ProductionCulture>("ProductionCulture"));
					var st = (entity as ProductionProductModelProductDescriptionCulture);

					if (st == null || row == null)
						return st;

					if (row.CultureID == null || row.CultureID == default(string))
						return st;

					st.ProductionCulture = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = ProductionCultureColumnNames.CultureID.ToString(),
					Operator = Operator.Equals,
					ParentField = ProductionProductModelProductDescriptionCultureColumnNames.CultureID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, ProductionProductDescription>("ProductionProductDescription")),
			TableName = "Production.ProductDescription",
			Alias = TableAlias + "_" + "ProductionProductDescription",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, ProductionProductDescription>("ProductionProductDescription"));
					var st = (entity as ProductionProductModelProductDescriptionCulture);

					if (st == null || row == null)
						return st;

					if (row.ProductDescriptionID == null || row.ProductDescriptionID == default(int))
						return st;

					st.ProductionProductDescription = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = ProductionProductDescriptionColumnNames.ProductDescriptionID.ToString(),
					Operator = Operator.Equals,
					ParentField = ProductionProductModelProductDescriptionCultureColumnNames.ProductDescriptionID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum ProductionProductPhotoColumnNames
	{	
		Id, 	
		ThumbNailPhoto, 	
		ThumbnailPhotoFileName, 	
		LargePhoto, 	
		LargePhotoFileName, 	
		ModifiedDate, 	
	}

	public enum ProductionProductPhotoCascadeNames
	{	
		productionproductproductphoto, 	
		}

	public class ProductionProductPhotoTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public ProductionProductPhotoTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = ProductionProductPhotoColumnNames.ProductPhotoID.ToString();
			Schema = "Production.ProductPhoto";
			TableName = "Production.ProductPhoto";
			TableAlias = "productionproductphoto";
			ColumnNames = typeof(ProductionProductPhotoColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum ProductionProductProductPhotoColumnNames
	{	
		Id, 	
		Id, 	
		Primary, 	
		ModifiedDate, 	
	}

	public enum ProductionProductProductPhotoCascadeNames
	{	
		
		productionproductphoto_p, 	
		productionproduct_p, 	}

	public class ProductionProductProductPhotoTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public ProductionProductProductPhotoTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = ProductionProductProductPhotoColumnNames.ProductID.ToString();
			Schema = "Production.ProductProductPhoto";
			TableName = "Production.ProductProductPhoto";
			TableAlias = "productionproductproductphoto";
			ColumnNames = typeof(ProductionProductProductPhotoColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_ProductProductPhoto_ProductPhoto_ProductPhotoID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, ProductionProductPhoto>("ProductionProductPhoto")),
			TableName = "Production.ProductPhoto",
			Alias = TableAlias + "_" + "ProductionProductPhoto",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, ProductionProductPhoto>("ProductionProductPhoto"));
					var st = (entity as ProductionProductProductPhoto);

					if (st == null || row == null)
						return st;

					if (row.ProductPhotoID == null || row.ProductPhotoID == default(int))
						return st;

					st.ProductionProductPhoto = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = ProductionProductPhotoColumnNames.ProductPhotoID.ToString(),
					Operator = Operator.Equals,
					ParentField = ProductionProductProductPhotoColumnNames.ProductPhotoID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_ProductProductPhoto_Product_ProductID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, ProductionProduct>("ProductionProduct")),
			TableName = "Production.Product",
			Alias = TableAlias + "_" + "ProductionProduct",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, ProductionProduct>("ProductionProduct"));
					var st = (entity as ProductionProductProductPhoto);

					if (st == null || row == null)
						return st;

					if (row.ProductID == null || row.ProductID == default(int))
						return st;

					st.ProductionProduct = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = ProductionProductColumnNames.ProductID.ToString(),
					Operator = Operator.Equals,
					ParentField = ProductionProductProductPhotoColumnNames.ProductID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum ProductionProductReviewColumnNames
	{	
		Id, 	
		ProductID, 	
		ReviewerName, 	
		ReviewDate, 	
		EmailAddress, 	
		Rating, 	
		Comments, 	
		ModifiedDate, 	
	}

	public enum ProductionProductReviewCascadeNames
	{	
		
		productionproduct_p, 	}

	public class ProductionProductReviewTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public ProductionProductReviewTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = ProductionProductReviewColumnNames.ProductReviewID.ToString();
			Schema = "Production.ProductReview";
			TableName = "Production.ProductReview";
			TableAlias = "productionproductreview";
			ColumnNames = typeof(ProductionProductReviewColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_ProductReview_Product_ProductID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, ProductionProduct>("ProductionProduct")),
			TableName = "Production.Product",
			Alias = TableAlias + "_" + "ProductionProduct",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, ProductionProduct>("ProductionProduct"));
					var st = (entity as ProductionProductReview);

					if (st == null || row == null)
						return st;

					if (row.ProductID == null || row.ProductID == default(int))
						return st;

					st.ProductionProduct = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = ProductionProductColumnNames.ProductID.ToString(),
					Operator = Operator.Equals,
					ParentField = ProductionProductReviewColumnNames.ProductID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum ProductionProductSubcategoryColumnNames
	{	
		Id, 	
		ProductCategoryID, 	
		Name, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum ProductionProductSubcategoryCascadeNames
	{	
		productionproduct, 	
		
		productionproductcategory_p, 	}

	public class ProductionProductSubcategoryTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public ProductionProductSubcategoryTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = ProductionProductSubcategoryColumnNames.ProductSubcategoryID.ToString();
			Schema = "Production.ProductSubcategory";
			TableName = "Production.ProductSubcategory";
			TableAlias = "productionproductsubcategory";
			ColumnNames = typeof(ProductionProductSubcategoryColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_ProductSubcategory_ProductCategory_ProductCategoryID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, ProductionProductCategory>("ProductionProductCategory")),
			TableName = "Production.ProductCategory",
			Alias = TableAlias + "_" + "ProductionProductCategory",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, ProductionProductCategory>("ProductionProductCategory"));
					var st = (entity as ProductionProductSubcategory);

					if (st == null || row == null)
						return st;

					if (row.ProductCategoryID == null || row.ProductCategoryID == default(int))
						return st;

					st.ProductionProductCategory = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = ProductionProductCategoryColumnNames.ProductCategoryID.ToString(),
					Operator = Operator.Equals,
					ParentField = ProductionProductSubcategoryColumnNames.ProductCategoryID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum PurchasingProductVendorColumnNames
	{	
		Id, 	
		Id, 	
		AverageLeadTime, 	
		StandardPrice, 	
		LastReceiptCost, 	
		LastReceiptDate, 	
		MinOrderQty, 	
		MaxOrderQty, 	
		OnOrderQty, 	
		UnitMeasureCode, 	
		ModifiedDate, 	
	}

	public enum PurchasingProductVendorCascadeNames
	{	
		
		productionunitmeasure_p, 	
		purchasingvendor_p, 	
		productionproduct_p, 	}

	public class PurchasingProductVendorTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public PurchasingProductVendorTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = PurchasingProductVendorColumnNames.ProductID.ToString();
			Schema = "Purchasing.ProductVendor";
			TableName = "Purchasing.ProductVendor";
			TableAlias = "purchasingproductvendor";
			ColumnNames = typeof(PurchasingProductVendorColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_ProductVendor_UnitMeasure_UnitMeasureCode
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<string, ProductionUnitMeasure>("ProductionUnitMeasure")),
			TableName = "Production.UnitMeasure",
			Alias = TableAlias + "_" + "ProductionUnitMeasure",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<string, ProductionUnitMeasure>("ProductionUnitMeasure"));
					var st = (entity as PurchasingProductVendor);

					if (st == null || row == null)
						return st;

					if (row.UnitMeasureCode == null || row.UnitMeasureCode == default(string))
						return st;

					st.ProductionUnitMeasure = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = ProductionUnitMeasureColumnNames.UnitMeasureCode.ToString(),
					Operator = Operator.Equals,
					ParentField = PurchasingProductVendorColumnNames.UnitMeasureCode.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_ProductVendor_Vendor_BusinessEntityID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, PurchasingVendor>("PurchasingVendor")),
			TableName = "Purchasing.Vendor",
			Alias = TableAlias + "_" + "PurchasingVendor",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, PurchasingVendor>("PurchasingVendor"));
					var st = (entity as PurchasingProductVendor);

					if (st == null || row == null)
						return st;

					if (row.BusinessEntityID == null || row.BusinessEntityID == default(int))
						return st;

					st.PurchasingVendor = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = PurchasingVendorColumnNames.BusinessEntityID.ToString(),
					Operator = Operator.Equals,
					ParentField = PurchasingProductVendorColumnNames.BusinessEntityID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_ProductVendor_Product_ProductID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, ProductionProduct>("ProductionProduct")),
			TableName = "Production.Product",
			Alias = TableAlias + "_" + "ProductionProduct",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, ProductionProduct>("ProductionProduct"));
					var st = (entity as PurchasingProductVendor);

					if (st == null || row == null)
						return st;

					if (row.ProductID == null || row.ProductID == default(int))
						return st;

					st.ProductionProduct = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = ProductionProductColumnNames.ProductID.ToString(),
					Operator = Operator.Equals,
					ParentField = PurchasingProductVendorColumnNames.ProductID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum PurchasingPurchaseOrderDetailColumnNames
	{	
		Id, 	
		Id, 	
		DueDate, 	
		OrderQty, 	
		ProductID, 	
		UnitPrice, 	
		LineTotal, 	
		ReceivedQty, 	
		RejectedQty, 	
		StockedQty, 	
		ModifiedDate, 	
	}

	public enum PurchasingPurchaseOrderDetailCascadeNames
	{	
		
		purchasingpurchaseorderheader_p, 	
		productionproduct_p, 	}

	public class PurchasingPurchaseOrderDetailTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public PurchasingPurchaseOrderDetailTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = PurchasingPurchaseOrderDetailColumnNames.PurchaseOrderID.ToString();
			Schema = "Purchasing.PurchaseOrderDetail";
			TableName = "Purchasing.PurchaseOrderDetail";
			TableAlias = "purchasingpurchaseorderdetail";
			ColumnNames = typeof(PurchasingPurchaseOrderDetailColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, PurchasingPurchaseOrderHeader>("PurchasingPurchaseOrderHeader")),
			TableName = "Purchasing.PurchaseOrderHeader",
			Alias = TableAlias + "_" + "PurchasingPurchaseOrderHeader",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, PurchasingPurchaseOrderHeader>("PurchasingPurchaseOrderHeader"));
					var st = (entity as PurchasingPurchaseOrderDetail);

					if (st == null || row == null)
						return st;

					if (row.PurchaseOrderID == null || row.PurchaseOrderID == default(int))
						return st;

					st.PurchasingPurchaseOrderHeader = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = PurchasingPurchaseOrderHeaderColumnNames.PurchaseOrderID.ToString(),
					Operator = Operator.Equals,
					ParentField = PurchasingPurchaseOrderDetailColumnNames.PurchaseOrderID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_PurchaseOrderDetail_Product_ProductID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, ProductionProduct>("ProductionProduct")),
			TableName = "Production.Product",
			Alias = TableAlias + "_" + "ProductionProduct",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, ProductionProduct>("ProductionProduct"));
					var st = (entity as PurchasingPurchaseOrderDetail);

					if (st == null || row == null)
						return st;

					if (row.ProductID == null || row.ProductID == default(int))
						return st;

					st.ProductionProduct = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = ProductionProductColumnNames.ProductID.ToString(),
					Operator = Operator.Equals,
					ParentField = PurchasingPurchaseOrderDetailColumnNames.ProductID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum PurchasingPurchaseOrderHeaderColumnNames
	{	
		Id, 	
		RevisionNumber, 	
		Status, 	
		EmployeeID, 	
		VendorID, 	
		ShipMethodID, 	
		OrderDate, 	
		ShipDate, 	
		SubTotal, 	
		TaxAmt, 	
		Freight, 	
		TotalDue, 	
		ModifiedDate, 	
	}

	public enum PurchasingPurchaseOrderHeaderCascadeNames
	{	
		purchasingpurchaseorderdetail, 	
		
		purchasingvendor_p, 	
		humanresourcesemployee_p, 	
		purchasingshipmethod_p, 	}

	public class PurchasingPurchaseOrderHeaderTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public PurchasingPurchaseOrderHeaderTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = PurchasingPurchaseOrderHeaderColumnNames.PurchaseOrderID.ToString();
			Schema = "Purchasing.PurchaseOrderHeader";
			TableName = "Purchasing.PurchaseOrderHeader";
			TableAlias = "purchasingpurchaseorderheader";
			ColumnNames = typeof(PurchasingPurchaseOrderHeaderColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_PurchaseOrderHeader_Vendor_VendorID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, PurchasingVendor>("PurchasingVendor")),
			TableName = "Purchasing.Vendor",
			Alias = TableAlias + "_" + "PurchasingVendor",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, PurchasingVendor>("PurchasingVendor"));
					var st = (entity as PurchasingPurchaseOrderHeader);

					if (st == null || row == null)
						return st;

					if (row.BusinessEntityID == null || row.BusinessEntityID == default(int))
						return st;

					st.PurchasingVendor = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = PurchasingVendorColumnNames.BusinessEntityID.ToString(),
					Operator = Operator.Equals,
					ParentField = PurchasingPurchaseOrderHeaderColumnNames.VendorID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_PurchaseOrderHeader_Employee_EmployeeID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, HumanResourcesEmployee>("HumanResourcesEmployee")),
			TableName = "HumanResources.Employee",
			Alias = TableAlias + "_" + "HumanResourcesEmployee",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, HumanResourcesEmployee>("HumanResourcesEmployee"));
					var st = (entity as PurchasingPurchaseOrderHeader);

					if (st == null || row == null)
						return st;

					if (row.BusinessEntityID == null || row.BusinessEntityID == default(int))
						return st;

					st.HumanResourcesEmployee = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = HumanResourcesEmployeeColumnNames.BusinessEntityID.ToString(),
					Operator = Operator.Equals,
					ParentField = PurchasingPurchaseOrderHeaderColumnNames.EmployeeID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_PurchaseOrderHeader_ShipMethod_ShipMethodID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, PurchasingShipMethod>("PurchasingShipMethod")),
			TableName = "Purchasing.ShipMethod",
			Alias = TableAlias + "_" + "PurchasingShipMethod",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, PurchasingShipMethod>("PurchasingShipMethod"));
					var st = (entity as PurchasingPurchaseOrderHeader);

					if (st == null || row == null)
						return st;

					if (row.ShipMethodID == null || row.ShipMethodID == default(int))
						return st;

					st.PurchasingShipMethod = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = PurchasingShipMethodColumnNames.ShipMethodID.ToString(),
					Operator = Operator.Equals,
					ParentField = PurchasingPurchaseOrderHeaderColumnNames.ShipMethodID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum SalesSalesOrderDetailColumnNames
	{	
		Id, 	
		Id, 	
		CarrierTrackingNumber, 	
		OrderQty, 	
		ProductID, 	
		SpecialOfferID, 	
		UnitPrice, 	
		UnitPriceDiscount, 	
		LineTotal, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum SalesSalesOrderDetailCascadeNames
	{	
		
		salesspecialofferproduct_p, 	
		salessalesorderheader_p, 	}

	public class SalesSalesOrderDetailTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public SalesSalesOrderDetailTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = SalesSalesOrderDetailColumnNames.SalesOrderID.ToString();
			Schema = "Sales.SalesOrderDetail";
			TableName = "Sales.SalesOrderDetail";
			TableAlias = "salessalesorderdetail";
			ColumnNames = typeof(SalesSalesOrderDetailColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, SalesSpecialOfferProduct>("SalesSpecialOfferProduct")),
			TableName = "Sales.SpecialOfferProduct",
			Alias = TableAlias + "_" + "SalesSpecialOfferProduct",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, SalesSpecialOfferProduct>("SalesSpecialOfferProduct"));
					var st = (entity as SalesSalesOrderDetail);

					if (st == null || row == null)
						return st;

					if (row.SpecialOfferID == null || row.SpecialOfferID == default(int))
						return st;

					st.SalesSpecialOfferProduct = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = SalesSpecialOfferProductColumnNames.SpecialOfferID.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesSalesOrderDetailColumnNames.SpecialOfferID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, SalesSpecialOfferProduct>("SalesSpecialOfferProduct")),
			TableName = "Sales.SpecialOfferProduct",
			Alias = TableAlias + "_" + "SalesSpecialOfferProduct",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, SalesSpecialOfferProduct>("SalesSpecialOfferProduct"));
					var st = (entity as SalesSalesOrderDetail);

					if (st == null || row == null)
						return st;

					if (row.ProductID == null || row.ProductID == default(int))
						return st;

					st.SalesSpecialOfferProduct = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = SalesSpecialOfferProductColumnNames.ProductID.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesSalesOrderDetailColumnNames.ProductID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, SalesSalesOrderHeader>("SalesSalesOrderHeader")),
			TableName = "Sales.SalesOrderHeader",
			Alias = TableAlias + "_" + "SalesSalesOrderHeader",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, SalesSalesOrderHeader>("SalesSalesOrderHeader"));
					var st = (entity as SalesSalesOrderDetail);

					if (st == null || row == null)
						return st;

					if (row.SalesOrderID == null || row.SalesOrderID == default(int))
						return st;

					st.SalesSalesOrderHeader = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = SalesSalesOrderHeaderColumnNames.SalesOrderID.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesSalesOrderDetailColumnNames.SalesOrderID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum SalesSalesOrderHeaderColumnNames
	{	
		Id, 	
		RevisionNumber, 	
		OrderDate, 	
		DueDate, 	
		ShipDate, 	
		Status, 	
		OnlineOrderFlag, 	
		SalesOrderNumber, 	
		PurchaseOrderNumber, 	
		AccountNumber, 	
		CustomerID, 	
		SalesPersonID, 	
		TerritoryID, 	
		BillToAddressID, 	
		ShipToAddressID, 	
		ShipMethodID, 	
		CreditCardID, 	
		CreditCardApprovalCode, 	
		CurrencyRateID, 	
		SubTotal, 	
		TaxAmt, 	
		Freight, 	
		TotalDue, 	
		Comment, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum SalesSalesOrderHeaderCascadeNames
	{	
		salessalesorderdetail, 	
		salessalesorderheadersalesreason, 	
		
		personaddress_p, 	
		salescreditcard_p, 	
		salescurrencyrate_p, 	
		salescustomer_p, 	
		salessalesperson_p, 	
		salessalesterritory_p, 	
		purchasingshipmethod_p, 	}

	public class SalesSalesOrderHeaderTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public SalesSalesOrderHeaderTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = SalesSalesOrderHeaderColumnNames.SalesOrderID.ToString();
			Schema = "Sales.SalesOrderHeader";
			TableName = "Sales.SalesOrderHeader";
			TableAlias = "salessalesorderheader";
			ColumnNames = typeof(SalesSalesOrderHeaderColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_SalesOrderHeader_Address_BillToAddressID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, PersonAddress>("PersonAddress")),
			TableName = "Person.Address",
			Alias = TableAlias + "_" + "PersonAddress",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, PersonAddress>("PersonAddress"));
					var st = (entity as SalesSalesOrderHeader);

					if (st == null || row == null)
						return st;

					if (row.AddressID == null || row.AddressID == default(int))
						return st;

					st.PersonAddress = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = PersonAddressColumnNames.AddressID.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesSalesOrderHeaderColumnNames.BillToAddressID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_SalesOrderHeader_Address_ShipToAddressID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, PersonAddress>("PersonAddress")),
			TableName = "Person.Address",
			Alias = TableAlias + "_" + "PersonAddress",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, PersonAddress>("PersonAddress"));
					var st = (entity as SalesSalesOrderHeader);

					if (st == null || row == null)
						return st;

					if (row.AddressID == null || row.AddressID == default(int))
						return st;

					st.PersonAddress = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = PersonAddressColumnNames.AddressID.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesSalesOrderHeaderColumnNames.ShipToAddressID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_SalesOrderHeader_Customer_CustomerID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, SalesCustomer>("SalesCustomer")),
			TableName = "Sales.Customer",
			Alias = TableAlias + "_" + "SalesCustomer",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, SalesCustomer>("SalesCustomer"));
					var st = (entity as SalesSalesOrderHeader);

					if (st == null || row == null)
						return st;

					if (row.CustomerID == null || row.CustomerID == default(int))
						return st;

					st.SalesCustomer = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = SalesCustomerColumnNames.CustomerID.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesSalesOrderHeaderColumnNames.CustomerID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_SalesOrderHeader_ShipMethod_ShipMethodID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, PurchasingShipMethod>("PurchasingShipMethod")),
			TableName = "Purchasing.ShipMethod",
			Alias = TableAlias + "_" + "PurchasingShipMethod",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, PurchasingShipMethod>("PurchasingShipMethod"));
					var st = (entity as SalesSalesOrderHeader);

					if (st == null || row == null)
						return st;

					if (row.ShipMethodID == null || row.ShipMethodID == default(int))
						return st;

					st.PurchasingShipMethod = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = PurchasingShipMethodColumnNames.ShipMethodID.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesSalesOrderHeaderColumnNames.ShipMethodID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_SalesOrderHeader_CreditCard_CreditCardID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, SalesCreditCard>("SalesCreditCard")),
			TableName = "Sales.CreditCard",
			Alias = TableAlias + "_" + "SalesCreditCard",
			Outer = true,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, SalesCreditCard>("SalesCreditCard"));
					var st = (entity as SalesSalesOrderHeader);

					if (st == null || row == null)
						return st;

					if (row.CreditCardID == null || row.CreditCardID == default(int))
						return st;

					st.SalesCreditCard = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = SalesCreditCardColumnNames.CreditCardID.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesSalesOrderHeaderColumnNames.CreditCardID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_SalesOrderHeader_CurrencyRate_CurrencyRateID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, SalesCurrencyRate>("SalesCurrencyRate")),
			TableName = "Sales.CurrencyRate",
			Alias = TableAlias + "_" + "SalesCurrencyRate",
			Outer = true,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, SalesCurrencyRate>("SalesCurrencyRate"));
					var st = (entity as SalesSalesOrderHeader);

					if (st == null || row == null)
						return st;

					if (row.CurrencyRateID == null || row.CurrencyRateID == default(int))
						return st;

					st.SalesCurrencyRate = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = SalesCurrencyRateColumnNames.CurrencyRateID.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesSalesOrderHeaderColumnNames.CurrencyRateID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_SalesOrderHeader_SalesPerson_SalesPersonID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, SalesSalesPerson>("SalesSalesPerson")),
			TableName = "Sales.SalesPerson",
			Alias = TableAlias + "_" + "SalesSalesPerson",
			Outer = true,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, SalesSalesPerson>("SalesSalesPerson"));
					var st = (entity as SalesSalesOrderHeader);

					if (st == null || row == null)
						return st;

					if (row.BusinessEntityID == null || row.BusinessEntityID == default(int))
						return st;

					st.SalesSalesPerson = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = SalesSalesPersonColumnNames.BusinessEntityID.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesSalesOrderHeaderColumnNames.SalesPersonID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_SalesOrderHeader_SalesTerritory_TerritoryID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, SalesSalesTerritory>("SalesSalesTerritory")),
			TableName = "Sales.SalesTerritory",
			Alias = TableAlias + "_" + "SalesSalesTerritory",
			Outer = true,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, SalesSalesTerritory>("SalesSalesTerritory"));
					var st = (entity as SalesSalesOrderHeader);

					if (st == null || row == null)
						return st;

					if (row.TerritoryID == null || row.TerritoryID == default(int))
						return st;

					st.SalesSalesTerritory = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = SalesSalesTerritoryColumnNames.TerritoryID.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesSalesOrderHeaderColumnNames.TerritoryID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum SalesSalesOrderHeaderSalesReasonColumnNames
	{	
		Id, 	
		Id, 	
		ModifiedDate, 	
	}

	public enum SalesSalesOrderHeaderSalesReasonCascadeNames
	{	
		
		salessalesorderheader_p, 	
		salessalesreason_p, 	}

	public class SalesSalesOrderHeaderSalesReasonTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public SalesSalesOrderHeaderSalesReasonTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = SalesSalesOrderHeaderSalesReasonColumnNames.SalesOrderID.ToString();
			Schema = "Sales.SalesOrderHeaderSalesReason";
			TableName = "Sales.SalesOrderHeaderSalesReason";
			TableAlias = "salessalesorderheadersalesreason";
			ColumnNames = typeof(SalesSalesOrderHeaderSalesReasonColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, SalesSalesOrderHeader>("SalesSalesOrderHeader")),
			TableName = "Sales.SalesOrderHeader",
			Alias = TableAlias + "_" + "SalesSalesOrderHeader",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, SalesSalesOrderHeader>("SalesSalesOrderHeader"));
					var st = (entity as SalesSalesOrderHeaderSalesReason);

					if (st == null || row == null)
						return st;

					if (row.SalesOrderID == null || row.SalesOrderID == default(int))
						return st;

					st.SalesSalesOrderHeader = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = SalesSalesOrderHeaderColumnNames.SalesOrderID.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesSalesOrderHeaderSalesReasonColumnNames.SalesOrderID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, SalesSalesReason>("SalesSalesReason")),
			TableName = "Sales.SalesReason",
			Alias = TableAlias + "_" + "SalesSalesReason",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, SalesSalesReason>("SalesSalesReason"));
					var st = (entity as SalesSalesOrderHeaderSalesReason);

					if (st == null || row == null)
						return st;

					if (row.SalesReasonID == null || row.SalesReasonID == default(int))
						return st;

					st.SalesSalesReason = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = SalesSalesReasonColumnNames.SalesReasonID.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesSalesOrderHeaderSalesReasonColumnNames.SalesReasonID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum SalesSalesPersonColumnNames
	{	
		Id, 	
		TerritoryID, 	
		SalesQuota, 	
		Bonus, 	
		CommissionPct, 	
		SalesYTD, 	
		SalesLastYear, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum SalesSalesPersonCascadeNames
	{	
		salesstore, 	
		salessalesorderheader, 	
		salessalespersonquotahistory, 	
		salessalesterritoryhistory, 	
		
		humanresourcesemployee_p, 	
		salessalesterritory_p, 	}

	public class SalesSalesPersonTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public SalesSalesPersonTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = SalesSalesPersonColumnNames.BusinessEntityID.ToString();
			Schema = "Sales.SalesPerson";
			TableName = "Sales.SalesPerson";
			TableAlias = "salessalesperson";
			ColumnNames = typeof(SalesSalesPersonColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_SalesPerson_Employee_BusinessEntityID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, HumanResourcesEmployee>("HumanResourcesEmployee")),
			TableName = "HumanResources.Employee",
			Alias = TableAlias + "_" + "HumanResourcesEmployee",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, HumanResourcesEmployee>("HumanResourcesEmployee"));
					var st = (entity as SalesSalesPerson);

					if (st == null || row == null)
						return st;

					if (row.BusinessEntityID == null || row.BusinessEntityID == default(int))
						return st;

					st.HumanResourcesEmployee = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = HumanResourcesEmployeeColumnNames.BusinessEntityID.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesSalesPersonColumnNames.BusinessEntityID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_SalesPerson_SalesTerritory_TerritoryID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, SalesSalesTerritory>("SalesSalesTerritory")),
			TableName = "Sales.SalesTerritory",
			Alias = TableAlias + "_" + "SalesSalesTerritory",
			Outer = true,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, SalesSalesTerritory>("SalesSalesTerritory"));
					var st = (entity as SalesSalesPerson);

					if (st == null || row == null)
						return st;

					if (row.TerritoryID == null || row.TerritoryID == default(int))
						return st;

					st.SalesSalesTerritory = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = SalesSalesTerritoryColumnNames.TerritoryID.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesSalesPersonColumnNames.TerritoryID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum SalesSalesPersonQuotaHistoryColumnNames
	{	
		Id, 	
		Id, 	
		SalesQuota, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum SalesSalesPersonQuotaHistoryCascadeNames
	{	
		
		salessalesperson_p, 	}

	public class SalesSalesPersonQuotaHistoryTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public SalesSalesPersonQuotaHistoryTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = SalesSalesPersonQuotaHistoryColumnNames.BusinessEntityID.ToString();
			Schema = "Sales.SalesPersonQuotaHistory";
			TableName = "Sales.SalesPersonQuotaHistory";
			TableAlias = "salessalespersonquotahistory";
			ColumnNames = typeof(SalesSalesPersonQuotaHistoryColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, SalesSalesPerson>("SalesSalesPerson")),
			TableName = "Sales.SalesPerson",
			Alias = TableAlias + "_" + "SalesSalesPerson",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, SalesSalesPerson>("SalesSalesPerson"));
					var st = (entity as SalesSalesPersonQuotaHistory);

					if (st == null || row == null)
						return st;

					if (row.BusinessEntityID == null || row.BusinessEntityID == default(int))
						return st;

					st.SalesSalesPerson = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = SalesSalesPersonColumnNames.BusinessEntityID.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesSalesPersonQuotaHistoryColumnNames.BusinessEntityID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum SalesSalesReasonColumnNames
	{	
		Id, 	
		Name, 	
		ReasonType, 	
		ModifiedDate, 	
	}

	public enum SalesSalesReasonCascadeNames
	{	
		salessalesorderheadersalesreason, 	
		}

	public class SalesSalesReasonTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public SalesSalesReasonTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = SalesSalesReasonColumnNames.SalesReasonID.ToString();
			Schema = "Sales.SalesReason";
			TableName = "Sales.SalesReason";
			TableAlias = "salessalesreason";
			ColumnNames = typeof(SalesSalesReasonColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum SalesSalesTaxRateColumnNames
	{	
		Id, 	
		StateProvinceID, 	
		TaxType, 	
		TaxRate, 	
		Name, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum SalesSalesTaxRateCascadeNames
	{	
		
		personstateprovince_p, 	}

	public class SalesSalesTaxRateTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public SalesSalesTaxRateTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = SalesSalesTaxRateColumnNames.SalesTaxRateID.ToString();
			Schema = "Sales.SalesTaxRate";
			TableName = "Sales.SalesTaxRate";
			TableAlias = "salessalestaxrate";
			ColumnNames = typeof(SalesSalesTaxRateColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_SalesTaxRate_StateProvince_StateProvinceID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, PersonStateProvince>("PersonStateProvince")),
			TableName = "Person.StateProvince",
			Alias = TableAlias + "_" + "PersonStateProvince",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, PersonStateProvince>("PersonStateProvince"));
					var st = (entity as SalesSalesTaxRate);

					if (st == null || row == null)
						return st;

					if (row.StateProvinceID == null || row.StateProvinceID == default(int))
						return st;

					st.PersonStateProvince = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = PersonStateProvinceColumnNames.StateProvinceID.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesSalesTaxRateColumnNames.StateProvinceID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum SalesSalesTerritoryColumnNames
	{	
		Id, 	
		Name, 	
		CountryRegionCode, 	
		Group, 	
		SalesYTD, 	
		SalesLastYear, 	
		CostYTD, 	
		CostLastYear, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum SalesSalesTerritoryCascadeNames
	{	
		personstateprovince, 	
		salescustomer, 	
		salessalesorderheader, 	
		salessalesperson, 	
		salessalesterritoryhistory, 	
		
		personcountryregion_p, 	}

	public class SalesSalesTerritoryTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public SalesSalesTerritoryTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = SalesSalesTerritoryColumnNames.TerritoryID.ToString();
			Schema = "Sales.SalesTerritory";
			TableName = "Sales.SalesTerritory";
			TableAlias = "salessalesterritory";
			ColumnNames = typeof(SalesSalesTerritoryColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_SalesTerritory_CountryRegion_CountryRegionCode
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<string, PersonCountryRegion>("PersonCountryRegion")),
			TableName = "Person.CountryRegion",
			Alias = TableAlias + "_" + "PersonCountryRegion",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<string, PersonCountryRegion>("PersonCountryRegion"));
					var st = (entity as SalesSalesTerritory);

					if (st == null || row == null)
						return st;

					if (row.CountryRegionCode == null || row.CountryRegionCode == default(string))
						return st;

					st.PersonCountryRegion = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = PersonCountryRegionColumnNames.CountryRegionCode.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesSalesTerritoryColumnNames.CountryRegionCode.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum SalesSalesTerritoryHistoryColumnNames
	{	
		Id, 	
		Id, 	
		Id, 	
		EndDate, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum SalesSalesTerritoryHistoryCascadeNames
	{	
		
		salessalesperson_p, 	
		salessalesterritory_p, 	}

	public class SalesSalesTerritoryHistoryTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public SalesSalesTerritoryHistoryTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = SalesSalesTerritoryHistoryColumnNames.BusinessEntityID.ToString();
			Schema = "Sales.SalesTerritoryHistory";
			TableName = "Sales.SalesTerritoryHistory";
			TableAlias = "salessalesterritoryhistory";
			ColumnNames = typeof(SalesSalesTerritoryHistoryColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, SalesSalesPerson>("SalesSalesPerson")),
			TableName = "Sales.SalesPerson",
			Alias = TableAlias + "_" + "SalesSalesPerson",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, SalesSalesPerson>("SalesSalesPerson"));
					var st = (entity as SalesSalesTerritoryHistory);

					if (st == null || row == null)
						return st;

					if (row.BusinessEntityID == null || row.BusinessEntityID == default(int))
						return st;

					st.SalesSalesPerson = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = SalesSalesPersonColumnNames.BusinessEntityID.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesSalesTerritoryHistoryColumnNames.BusinessEntityID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_SalesTerritoryHistory_SalesTerritory_TerritoryID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, SalesSalesTerritory>("SalesSalesTerritory")),
			TableName = "Sales.SalesTerritory",
			Alias = TableAlias + "_" + "SalesSalesTerritory",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, SalesSalesTerritory>("SalesSalesTerritory"));
					var st = (entity as SalesSalesTerritoryHistory);

					if (st == null || row == null)
						return st;

					if (row.TerritoryID == null || row.TerritoryID == default(int))
						return st;

					st.SalesSalesTerritory = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = SalesSalesTerritoryColumnNames.TerritoryID.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesSalesTerritoryHistoryColumnNames.TerritoryID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum ProductionScrapReasonColumnNames
	{	
		Id, 	
		Name, 	
		ModifiedDate, 	
	}

	public enum ProductionScrapReasonCascadeNames
	{	
		productionworkorder, 	
		}

	public class ProductionScrapReasonTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public ProductionScrapReasonTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = ProductionScrapReasonColumnNames.ScrapReasonID.ToString();
			Schema = "Production.ScrapReason";
			TableName = "Production.ScrapReason";
			TableAlias = "productionscrapreason";
			ColumnNames = typeof(ProductionScrapReasonColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum HumanResourcesShiftColumnNames
	{	
		Id, 	
		Name, 	
		StartTime, 	
		EndTime, 	
		ModifiedDate, 	
	}

	public enum HumanResourcesShiftCascadeNames
	{	
		humanresourcesemployeedepartmenthistory, 	
		}

	public class HumanResourcesShiftTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public HumanResourcesShiftTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = HumanResourcesShiftColumnNames.ShiftID.ToString();
			Schema = "HumanResources.Shift";
			TableName = "HumanResources.Shift";
			TableAlias = "humanresourcesshift";
			ColumnNames = typeof(HumanResourcesShiftColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum PurchasingShipMethodColumnNames
	{	
		Id, 	
		Name, 	
		ShipBase, 	
		ShipRate, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum PurchasingShipMethodCascadeNames
	{	
		purchasingpurchaseorderheader, 	
		salessalesorderheader, 	
		}

	public class PurchasingShipMethodTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public PurchasingShipMethodTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = PurchasingShipMethodColumnNames.ShipMethodID.ToString();
			Schema = "Purchasing.ShipMethod";
			TableName = "Purchasing.ShipMethod";
			TableAlias = "purchasingshipmethod";
			ColumnNames = typeof(PurchasingShipMethodColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum SalesShoppingCartItemColumnNames
	{	
		Id, 	
		ShoppingCartID, 	
		Quantity, 	
		ProductID, 	
		DateCreated, 	
		ModifiedDate, 	
	}

	public enum SalesShoppingCartItemCascadeNames
	{	
		
		productionproduct_p, 	}

	public class SalesShoppingCartItemTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public SalesShoppingCartItemTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = SalesShoppingCartItemColumnNames.ShoppingCartItemID.ToString();
			Schema = "Sales.ShoppingCartItem";
			TableName = "Sales.ShoppingCartItem";
			TableAlias = "salesshoppingcartitem";
			ColumnNames = typeof(SalesShoppingCartItemColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_ShoppingCartItem_Product_ProductID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, ProductionProduct>("ProductionProduct")),
			TableName = "Production.Product",
			Alias = TableAlias + "_" + "ProductionProduct",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, ProductionProduct>("ProductionProduct"));
					var st = (entity as SalesShoppingCartItem);

					if (st == null || row == null)
						return st;

					if (row.ProductID == null || row.ProductID == default(int))
						return st;

					st.ProductionProduct = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = ProductionProductColumnNames.ProductID.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesShoppingCartItemColumnNames.ProductID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum SalesSpecialOfferColumnNames
	{	
		Id, 	
		Description, 	
		DiscountPct, 	
		Type, 	
		Category, 	
		StartDate, 	
		EndDate, 	
		MinQty, 	
		MaxQty, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum SalesSpecialOfferCascadeNames
	{	
		salesspecialofferproduct, 	
		}

	public class SalesSpecialOfferTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public SalesSpecialOfferTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = SalesSpecialOfferColumnNames.SpecialOfferID.ToString();
			Schema = "Sales.SpecialOffer";
			TableName = "Sales.SpecialOffer";
			TableAlias = "salesspecialoffer";
			ColumnNames = typeof(SalesSpecialOfferColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum SalesSpecialOfferProductColumnNames
	{	
		Id, 	
		Id, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum SalesSpecialOfferProductCascadeNames
	{	
		salessalesorderdetail, 	
		
		salesspecialoffer_p, 	
		productionproduct_p, 	}

	public class SalesSpecialOfferProductTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public SalesSpecialOfferProductTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = SalesSpecialOfferProductColumnNames.SpecialOfferID.ToString();
			Schema = "Sales.SpecialOfferProduct";
			TableName = "Sales.SpecialOfferProduct";
			TableAlias = "salesspecialofferproduct";
			ColumnNames = typeof(SalesSpecialOfferProductColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, SalesSpecialOffer>("SalesSpecialOffer")),
			TableName = "Sales.SpecialOffer",
			Alias = TableAlias + "_" + "SalesSpecialOffer",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, SalesSpecialOffer>("SalesSpecialOffer"));
					var st = (entity as SalesSpecialOfferProduct);

					if (st == null || row == null)
						return st;

					if (row.SpecialOfferID == null || row.SpecialOfferID == default(int))
						return st;

					st.SalesSpecialOffer = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = SalesSpecialOfferColumnNames.SpecialOfferID.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesSpecialOfferProductColumnNames.SpecialOfferID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_SpecialOfferProduct_Product_ProductID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, ProductionProduct>("ProductionProduct")),
			TableName = "Production.Product",
			Alias = TableAlias + "_" + "ProductionProduct",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, ProductionProduct>("ProductionProduct"));
					var st = (entity as SalesSpecialOfferProduct);

					if (st == null || row == null)
						return st;

					if (row.ProductID == null || row.ProductID == default(int))
						return st;

					st.ProductionProduct = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = ProductionProductColumnNames.ProductID.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesSpecialOfferProductColumnNames.ProductID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum PersonStateProvinceColumnNames
	{	
		Id, 	
		StateProvinceCode, 	
		CountryRegionCode, 	
		IsOnlyStateProvinceFlag, 	
		Name, 	
		TerritoryID, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum PersonStateProvinceCascadeNames
	{	
		personaddress, 	
		salessalestaxrate, 	
		
		personcountryregion_p, 	
		salessalesterritory_p, 	}

	public class PersonStateProvinceTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public PersonStateProvinceTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = PersonStateProvinceColumnNames.StateProvinceID.ToString();
			Schema = "Person.StateProvince";
			TableName = "Person.StateProvince";
			TableAlias = "personstateprovince";
			ColumnNames = typeof(PersonStateProvinceColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_StateProvince_CountryRegion_CountryRegionCode
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<string, PersonCountryRegion>("PersonCountryRegion")),
			TableName = "Person.CountryRegion",
			Alias = TableAlias + "_" + "PersonCountryRegion",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<string, PersonCountryRegion>("PersonCountryRegion"));
					var st = (entity as PersonStateProvince);

					if (st == null || row == null)
						return st;

					if (row.CountryRegionCode == null || row.CountryRegionCode == default(string))
						return st;

					st.PersonCountryRegion = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = PersonCountryRegionColumnNames.CountryRegionCode.ToString(),
					Operator = Operator.Equals,
					ParentField = PersonStateProvinceColumnNames.CountryRegionCode.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_StateProvince_SalesTerritory_TerritoryID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, SalesSalesTerritory>("SalesSalesTerritory")),
			TableName = "Sales.SalesTerritory",
			Alias = TableAlias + "_" + "SalesSalesTerritory",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, SalesSalesTerritory>("SalesSalesTerritory"));
					var st = (entity as PersonStateProvince);

					if (st == null || row == null)
						return st;

					if (row.TerritoryID == null || row.TerritoryID == default(int))
						return st;

					st.SalesSalesTerritory = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = SalesSalesTerritoryColumnNames.TerritoryID.ToString(),
					Operator = Operator.Equals,
					ParentField = PersonStateProvinceColumnNames.TerritoryID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum SalesStoreColumnNames
	{	
		Id, 	
		Name, 	
		SalesPersonID, 	
		Demographics, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum SalesStoreCascadeNames
	{	
		salescustomer, 	
		
		personbusinessentity_p, 	
		salessalesperson_p, 	}

	public class SalesStoreTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public SalesStoreTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = SalesStoreColumnNames.BusinessEntityID.ToString();
			Schema = "Sales.Store";
			TableName = "Sales.Store";
			TableAlias = "salesstore";
			ColumnNames = typeof(SalesStoreColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_Store_BusinessEntity_BusinessEntityID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, PersonBusinessEntity>("PersonBusinessEntity")),
			TableName = "Person.BusinessEntity",
			Alias = TableAlias + "_" + "PersonBusinessEntity",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, PersonBusinessEntity>("PersonBusinessEntity"));
					var st = (entity as SalesStore);

					if (st == null || row == null)
						return st;

					if (row.BusinessEntityID == null || row.BusinessEntityID == default(int))
						return st;

					st.PersonBusinessEntity = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = PersonBusinessEntityColumnNames.BusinessEntityID.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesStoreColumnNames.BusinessEntityID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_Store_SalesPerson_SalesPersonID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, SalesSalesPerson>("SalesSalesPerson")),
			TableName = "Sales.SalesPerson",
			Alias = TableAlias + "_" + "SalesSalesPerson",
			Outer = true,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, SalesSalesPerson>("SalesSalesPerson"));
					var st = (entity as SalesStore);

					if (st == null || row == null)
						return st;

					if (row.BusinessEntityID == null || row.BusinessEntityID == default(int))
						return st;

					st.SalesSalesPerson = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = SalesSalesPersonColumnNames.BusinessEntityID.ToString(),
					Operator = Operator.Equals,
					ParentField = SalesStoreColumnNames.SalesPersonID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum ProductionTransactionHistoryColumnNames
	{	
		Id, 	
		ProductID, 	
		ReferenceOrderID, 	
		ReferenceOrderLineID, 	
		TransactionDate, 	
		TransactionType, 	
		Quantity, 	
		ActualCost, 	
		ModifiedDate, 	
	}

	public enum ProductionTransactionHistoryCascadeNames
	{	
		
		productionproduct_p, 	}

	public class ProductionTransactionHistoryTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public ProductionTransactionHistoryTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = ProductionTransactionHistoryColumnNames.TransactionID.ToString();
			Schema = "Production.TransactionHistory";
			TableName = "Production.TransactionHistory";
			TableAlias = "productiontransactionhistory";
			ColumnNames = typeof(ProductionTransactionHistoryColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_TransactionHistory_Product_ProductID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, ProductionProduct>("ProductionProduct")),
			TableName = "Production.Product",
			Alias = TableAlias + "_" + "ProductionProduct",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, ProductionProduct>("ProductionProduct"));
					var st = (entity as ProductionTransactionHistory);

					if (st == null || row == null)
						return st;

					if (row.ProductID == null || row.ProductID == default(int))
						return st;

					st.ProductionProduct = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = ProductionProductColumnNames.ProductID.ToString(),
					Operator = Operator.Equals,
					ParentField = ProductionTransactionHistoryColumnNames.ProductID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum ProductionTransactionHistoryArchiveColumnNames
	{	
		Id, 	
		ProductID, 	
		ReferenceOrderID, 	
		ReferenceOrderLineID, 	
		TransactionDate, 	
		TransactionType, 	
		Quantity, 	
		ActualCost, 	
		ModifiedDate, 	
	}

	public enum ProductionTransactionHistoryArchiveCascadeNames
	{	
		}

	public class ProductionTransactionHistoryArchiveTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public ProductionTransactionHistoryArchiveTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = ProductionTransactionHistoryArchiveColumnNames.TransactionID.ToString();
			Schema = "Production.TransactionHistoryArchive";
			TableName = "Production.TransactionHistoryArchive";
			TableAlias = "productiontransactionhistoryarchive";
			ColumnNames = typeof(ProductionTransactionHistoryArchiveColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum ProductionUnitMeasureColumnNames
	{	
		Id, 	
		Name, 	
		ModifiedDate, 	
	}

	public enum ProductionUnitMeasureCascadeNames
	{	
		purchasingproductvendor, 	
		productionproduct, 	
		}

	public class ProductionUnitMeasureTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public ProductionUnitMeasureTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = ProductionUnitMeasureColumnNames.UnitMeasureCode.ToString();
			Schema = "Production.UnitMeasure";
			TableName = "Production.UnitMeasure";
			TableAlias = "productionunitmeasure";
			ColumnNames = typeof(ProductionUnitMeasureColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum PersonvAdditionalContactInfoColumnNames
	{	
		BusinessEntityID, 	
		FirstName, 	
		MiddleName, 	
		LastName, 	
		TelephoneNumber, 	
		TelephoneSpecialInstructions, 	
		Street, 	
		City, 	
		StateProvince, 	
		PostalCode, 	
		CountryRegion, 	
		HomeAddressSpecialInstructions, 	
		EMailAddress, 	
		EMailSpecialInstructions, 	
		EMailTelephoneNumber, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum PersonvAdditionalContactInfoCascadeNames
	{	
		}

	public class PersonvAdditionalContactInfoTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public PersonvAdditionalContactInfoTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = false;
			IdColumn = PersonvAdditionalContactInfoColumnNames.BusinessEntityID.ToString();
			Schema = "Person.vAdditionalContactInfo";
			TableName = "Person.vAdditionalContactInfo";
			TableAlias = "personvadditionalcontactinfo";
			ColumnNames = typeof(PersonvAdditionalContactInfoColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum HumanResourcesvEmployeeColumnNames
	{	
		BusinessEntityID, 	
		Title, 	
		FirstName, 	
		MiddleName, 	
		LastName, 	
		Suffix, 	
		JobTitle, 	
		PhoneNumber, 	
		PhoneNumberType, 	
		EmailAddress, 	
		EmailPromotion, 	
		AddressLine1, 	
		AddressLine2, 	
		City, 	
		StateProvinceName, 	
		PostalCode, 	
		CountryRegionName, 	
		AdditionalContactInfo, 	
	}

	public enum HumanResourcesvEmployeeCascadeNames
	{	
		}

	public class HumanResourcesvEmployeeTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public HumanResourcesvEmployeeTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = false;
			IdColumn = HumanResourcesvEmployeeColumnNames.BusinessEntityID.ToString();
			Schema = "HumanResources.vEmployee";
			TableName = "HumanResources.vEmployee";
			TableAlias = "humanresourcesvemployee";
			ColumnNames = typeof(HumanResourcesvEmployeeColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum HumanResourcesvEmployeeDepartmentColumnNames
	{	
		BusinessEntityID, 	
		Title, 	
		FirstName, 	
		MiddleName, 	
		LastName, 	
		Suffix, 	
		JobTitle, 	
		Department, 	
		GroupName, 	
		StartDate, 	
	}

	public enum HumanResourcesvEmployeeDepartmentCascadeNames
	{	
		}

	public class HumanResourcesvEmployeeDepartmentTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public HumanResourcesvEmployeeDepartmentTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = false;
			IdColumn = HumanResourcesvEmployeeDepartmentColumnNames.BusinessEntityID.ToString();
			Schema = "HumanResources.vEmployeeDepartment";
			TableName = "HumanResources.vEmployeeDepartment";
			TableAlias = "humanresourcesvemployeedepartment";
			ColumnNames = typeof(HumanResourcesvEmployeeDepartmentColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum HumanResourcesvEmployeeDepartmentHistoryColumnNames
	{	
		BusinessEntityID, 	
		Title, 	
		FirstName, 	
		MiddleName, 	
		LastName, 	
		Suffix, 	
		Shift, 	
		Department, 	
		GroupName, 	
		StartDate, 	
		EndDate, 	
	}

	public enum HumanResourcesvEmployeeDepartmentHistoryCascadeNames
	{	
		}

	public class HumanResourcesvEmployeeDepartmentHistoryTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public HumanResourcesvEmployeeDepartmentHistoryTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = false;
			IdColumn = HumanResourcesvEmployeeDepartmentHistoryColumnNames.BusinessEntityID.ToString();
			Schema = "HumanResources.vEmployeeDepartmentHistory";
			TableName = "HumanResources.vEmployeeDepartmentHistory";
			TableAlias = "humanresourcesvemployeedepartmenthistory";
			ColumnNames = typeof(HumanResourcesvEmployeeDepartmentHistoryColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum PurchasingVendorColumnNames
	{	
		Id, 	
		AccountNumber, 	
		Name, 	
		CreditRating, 	
		PreferredVendorStatus, 	
		ActiveFlag, 	
		PurchasingWebServiceURL, 	
		ModifiedDate, 	
	}

	public enum PurchasingVendorCascadeNames
	{	
		purchasingproductvendor, 	
		purchasingpurchaseorderheader, 	
		
		personbusinessentity_p, 	}

	public class PurchasingVendorTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public PurchasingVendorTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = PurchasingVendorColumnNames.BusinessEntityID.ToString();
			Schema = "Purchasing.Vendor";
			TableName = "Purchasing.Vendor";
			TableAlias = "purchasingvendor";
			ColumnNames = typeof(PurchasingVendorColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_Vendor_BusinessEntity_BusinessEntityID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, PersonBusinessEntity>("PersonBusinessEntity")),
			TableName = "Person.BusinessEntity",
			Alias = TableAlias + "_" + "PersonBusinessEntity",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, PersonBusinessEntity>("PersonBusinessEntity"));
					var st = (entity as PurchasingVendor);

					if (st == null || row == null)
						return st;

					if (row.BusinessEntityID == null || row.BusinessEntityID == default(int))
						return st;

					st.PersonBusinessEntity = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = PersonBusinessEntityColumnNames.BusinessEntityID.ToString(),
					Operator = Operator.Equals,
					ParentField = PurchasingVendorColumnNames.BusinessEntityID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum SalesvIndividualCustomerColumnNames
	{	
		BusinessEntityID, 	
		Title, 	
		FirstName, 	
		MiddleName, 	
		LastName, 	
		Suffix, 	
		PhoneNumber, 	
		PhoneNumberType, 	
		EmailAddress, 	
		EmailPromotion, 	
		AddressType, 	
		AddressLine1, 	
		AddressLine2, 	
		City, 	
		StateProvinceName, 	
		PostalCode, 	
		CountryRegionName, 	
		Demographics, 	
	}

	public enum SalesvIndividualCustomerCascadeNames
	{	
		}

	public class SalesvIndividualCustomerTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public SalesvIndividualCustomerTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = false;
			IdColumn = SalesvIndividualCustomerColumnNames.BusinessEntityID.ToString();
			Schema = "Sales.vIndividualCustomer";
			TableName = "Sales.vIndividualCustomer";
			TableAlias = "salesvindividualcustomer";
			ColumnNames = typeof(SalesvIndividualCustomerColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum HumanResourcesvJobCandidateColumnNames
	{	
		JobCandidateID, 	
		BusinessEntityID, 	
		Name__Prefix, 	
		Name__First, 	
		Name__Middle, 	
		Name__Last, 	
		Name__Suffix, 	
		Skills, 	
		Addr__Type, 	
		Addr__Loc__CountryRegion, 	
		Addr__Loc__State, 	
		Addr__Loc__City, 	
		Addr__PostalCode, 	
		EMail, 	
		WebSite, 	
		ModifiedDate, 	
	}

	public enum HumanResourcesvJobCandidateCascadeNames
	{	
		}

	public class HumanResourcesvJobCandidateTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public HumanResourcesvJobCandidateTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = false;
			IdColumn = HumanResourcesvJobCandidateColumnNames.JobCandidateID.ToString();
			Schema = "HumanResources.vJobCandidate";
			TableName = "HumanResources.vJobCandidate";
			TableAlias = "humanresourcesvjobcandidate";
			ColumnNames = typeof(HumanResourcesvJobCandidateColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum HumanResourcesvJobCandidateEducationColumnNames
	{	
		JobCandidateID, 	
		Edu__Level, 	
		Edu__StartDate, 	
		Edu__EndDate, 	
		Edu__Degree, 	
		Edu__Major, 	
		Edu__Minor, 	
		Edu__GPA, 	
		Edu__GPAScale, 	
		Edu__School, 	
		Edu__Loc__CountryRegion, 	
		Edu__Loc__State, 	
		Edu__Loc__City, 	
	}

	public enum HumanResourcesvJobCandidateEducationCascadeNames
	{	
		}

	public class HumanResourcesvJobCandidateEducationTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public HumanResourcesvJobCandidateEducationTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = false;
			IdColumn = HumanResourcesvJobCandidateEducationColumnNames.JobCandidateID.ToString();
			Schema = "HumanResources.vJobCandidateEducation";
			TableName = "HumanResources.vJobCandidateEducation";
			TableAlias = "humanresourcesvjobcandidateeducation";
			ColumnNames = typeof(HumanResourcesvJobCandidateEducationColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum HumanResourcesvJobCandidateEmploymentColumnNames
	{	
		JobCandidateID, 	
		Emp__StartDate, 	
		Emp__EndDate, 	
		Emp__OrgName, 	
		Emp__JobTitle, 	
		Emp__Responsibility, 	
		Emp__FunctionCategory, 	
		Emp__IndustryCategory, 	
		Emp__Loc__CountryRegion, 	
		Emp__Loc__State, 	
		Emp__Loc__City, 	
	}

	public enum HumanResourcesvJobCandidateEmploymentCascadeNames
	{	
		}

	public class HumanResourcesvJobCandidateEmploymentTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public HumanResourcesvJobCandidateEmploymentTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = false;
			IdColumn = HumanResourcesvJobCandidateEmploymentColumnNames.JobCandidateID.ToString();
			Schema = "HumanResources.vJobCandidateEmployment";
			TableName = "HumanResources.vJobCandidateEmployment";
			TableAlias = "humanresourcesvjobcandidateemployment";
			ColumnNames = typeof(HumanResourcesvJobCandidateEmploymentColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum SalesvPersonDemographicColumnNames
	{	
		BusinessEntityID, 	
		TotalPurchaseYTD, 	
		DateFirstPurchase, 	
		BirthDate, 	
		MaritalStatus, 	
		YearlyIncome, 	
		Gender, 	
		TotalChildren, 	
		NumberChildrenAtHome, 	
		Education, 	
		Occupation, 	
		HomeOwnerFlag, 	
		NumberCarsOwned, 	
	}

	public enum SalesvPersonDemographicCascadeNames
	{	
		}

	public class SalesvPersonDemographicTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public SalesvPersonDemographicTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = false;
			IdColumn = SalesvPersonDemographicColumnNames.BusinessEntityID.ToString();
			Schema = "Sales.vPersonDemographics";
			TableName = "Sales.vPersonDemographics";
			TableAlias = "salesvpersondemographic";
			ColumnNames = typeof(SalesvPersonDemographicColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum ProductionvProductAndDescriptionColumnNames
	{	
		ProductID, 	
		Name, 	
		ProductModel, 	
		CultureID, 	
		Description, 	
	}

	public enum ProductionvProductAndDescriptionCascadeNames
	{	
		}

	public class ProductionvProductAndDescriptionTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public ProductionvProductAndDescriptionTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = false;
			IdColumn = ProductionvProductAndDescriptionColumnNames.ProductID.ToString();
			Schema = "Production.vProductAndDescription";
			TableName = "Production.vProductAndDescription";
			TableAlias = "productionvproductanddescription";
			ColumnNames = typeof(ProductionvProductAndDescriptionColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum ProductionvProductModelCatalogDescriptionColumnNames
	{	
		ProductModelID, 	
		Name, 	
		Summary, 	
		Manufacturer, 	
		Copyright, 	
		ProductURL, 	
		WarrantyPeriod, 	
		WarrantyDescription, 	
		NoOfYears, 	
		MaintenanceDescription, 	
		Wheel, 	
		Saddle, 	
		Pedal, 	
		BikeFrame, 	
		Crankset, 	
		PictureAngle, 	
		PictureSize, 	
		ProductPhotoID, 	
		Material, 	
		Color, 	
		ProductLine, 	
		Style, 	
		RiderExperience, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum ProductionvProductModelCatalogDescriptionCascadeNames
	{	
		}

	public class ProductionvProductModelCatalogDescriptionTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public ProductionvProductModelCatalogDescriptionTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = false;
			IdColumn = ProductionvProductModelCatalogDescriptionColumnNames.ProductModelID.ToString();
			Schema = "Production.vProductModelCatalogDescription";
			TableName = "Production.vProductModelCatalogDescription";
			TableAlias = "productionvproductmodelcatalogdescription";
			ColumnNames = typeof(ProductionvProductModelCatalogDescriptionColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum ProductionvProductModelInstructionColumnNames
	{	
		ProductModelID, 	
		Name, 	
		Instructions, 	
		LocationID, 	
		SetupHours, 	
		MachineHours, 	
		LaborHours, 	
		LotSize, 	
		Step, 	
		rowguid, 	
		ModifiedDate, 	
	}

	public enum ProductionvProductModelInstructionCascadeNames
	{	
		}

	public class ProductionvProductModelInstructionTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public ProductionvProductModelInstructionTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = false;
			IdColumn = ProductionvProductModelInstructionColumnNames.ProductModelID.ToString();
			Schema = "Production.vProductModelInstructions";
			TableName = "Production.vProductModelInstructions";
			TableAlias = "productionvproductmodelinstruction";
			ColumnNames = typeof(ProductionvProductModelInstructionColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum SalesvSalesPersonColumnNames
	{	
		BusinessEntityID, 	
		Title, 	
		FirstName, 	
		MiddleName, 	
		LastName, 	
		Suffix, 	
		JobTitle, 	
		PhoneNumber, 	
		PhoneNumberType, 	
		EmailAddress, 	
		EmailPromotion, 	
		AddressLine1, 	
		AddressLine2, 	
		City, 	
		StateProvinceName, 	
		PostalCode, 	
		CountryRegionName, 	
		TerritoryName, 	
		TerritoryGroup, 	
		SalesQuota, 	
		SalesYTD, 	
		SalesLastYear, 	
	}

	public enum SalesvSalesPersonCascadeNames
	{	
		}

	public class SalesvSalesPersonTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public SalesvSalesPersonTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = false;
			IdColumn = SalesvSalesPersonColumnNames.BusinessEntityID.ToString();
			Schema = "Sales.vSalesPerson";
			TableName = "Sales.vSalesPerson";
			TableAlias = "salesvsalesperson";
			ColumnNames = typeof(SalesvSalesPersonColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum SalesvSalesPersonSalesByFiscalYearColumnNames
	{	
		SalesPersonID, 	
		FullName, 	
		JobTitle, 	
		SalesTerritory, 	
		_n_2002, 	
		_n_2003, 	
		_n_2004, 	
	}

	public enum SalesvSalesPersonSalesByFiscalYearCascadeNames
	{	
		}

	public class SalesvSalesPersonSalesByFiscalYearTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public SalesvSalesPersonSalesByFiscalYearTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = false;
			IdColumn = SalesvSalesPersonSalesByFiscalYearColumnNames.SalesPersonID.ToString();
			Schema = "Sales.vSalesPersonSalesByFiscalYears";
			TableName = "Sales.vSalesPersonSalesByFiscalYears";
			TableAlias = "salesvsalespersonsalesbyfiscalyear";
			ColumnNames = typeof(SalesvSalesPersonSalesByFiscalYearColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum PersonvStateProvinceCountryRegionColumnNames
	{	
		StateProvinceID, 	
		StateProvinceCode, 	
		IsOnlyStateProvinceFlag, 	
		StateProvinceName, 	
		TerritoryID, 	
		CountryRegionCode, 	
		CountryRegionName, 	
	}

	public enum PersonvStateProvinceCountryRegionCascadeNames
	{	
		}

	public class PersonvStateProvinceCountryRegionTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public PersonvStateProvinceCountryRegionTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = false;
			IdColumn = PersonvStateProvinceCountryRegionColumnNames.StateProvinceID.ToString();
			Schema = "Person.vStateProvinceCountryRegion";
			TableName = "Person.vStateProvinceCountryRegion";
			TableAlias = "personvstateprovincecountryregion";
			ColumnNames = typeof(PersonvStateProvinceCountryRegionColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum SalesvStoreWithAddressColumnNames
	{	
		BusinessEntityID, 	
		Name, 	
		AddressType, 	
		AddressLine1, 	
		AddressLine2, 	
		City, 	
		StateProvinceName, 	
		PostalCode, 	
		CountryRegionName, 	
	}

	public enum SalesvStoreWithAddressCascadeNames
	{	
		}

	public class SalesvStoreWithAddressTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public SalesvStoreWithAddressTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = false;
			IdColumn = SalesvStoreWithAddressColumnNames.BusinessEntityID.ToString();
			Schema = "Sales.vStoreWithAddresses";
			TableName = "Sales.vStoreWithAddresses";
			TableAlias = "salesvstorewithaddress";
			ColumnNames = typeof(SalesvStoreWithAddressColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum SalesvStoreWithContactColumnNames
	{	
		BusinessEntityID, 	
		Name, 	
		ContactType, 	
		Title, 	
		FirstName, 	
		MiddleName, 	
		LastName, 	
		Suffix, 	
		PhoneNumber, 	
		PhoneNumberType, 	
		EmailAddress, 	
		EmailPromotion, 	
	}

	public enum SalesvStoreWithContactCascadeNames
	{	
		}

	public class SalesvStoreWithContactTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public SalesvStoreWithContactTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = false;
			IdColumn = SalesvStoreWithContactColumnNames.BusinessEntityID.ToString();
			Schema = "Sales.vStoreWithContacts";
			TableName = "Sales.vStoreWithContacts";
			TableAlias = "salesvstorewithcontact";
			ColumnNames = typeof(SalesvStoreWithContactColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum SalesvStoreWithDemographicColumnNames
	{	
		BusinessEntityID, 	
		Name, 	
		AnnualSales, 	
		AnnualRevenue, 	
		BankName, 	
		BusinessType, 	
		YearOpened, 	
		Specialty, 	
		SquareFeet, 	
		Brands, 	
		Internet, 	
		NumberEmployees, 	
	}

	public enum SalesvStoreWithDemographicCascadeNames
	{	
		}

	public class SalesvStoreWithDemographicTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public SalesvStoreWithDemographicTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = false;
			IdColumn = SalesvStoreWithDemographicColumnNames.BusinessEntityID.ToString();
			Schema = "Sales.vStoreWithDemographics";
			TableName = "Sales.vStoreWithDemographics";
			TableAlias = "salesvstorewithdemographic";
			ColumnNames = typeof(SalesvStoreWithDemographicColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum PurchasingvVendorWithAddressColumnNames
	{	
		BusinessEntityID, 	
		Name, 	
		AddressType, 	
		AddressLine1, 	
		AddressLine2, 	
		City, 	
		StateProvinceName, 	
		PostalCode, 	
		CountryRegionName, 	
	}

	public enum PurchasingvVendorWithAddressCascadeNames
	{	
		}

	public class PurchasingvVendorWithAddressTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public PurchasingvVendorWithAddressTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = false;
			IdColumn = PurchasingvVendorWithAddressColumnNames.BusinessEntityID.ToString();
			Schema = "Purchasing.vVendorWithAddresses";
			TableName = "Purchasing.vVendorWithAddresses";
			TableAlias = "purchasingvvendorwithaddress";
			ColumnNames = typeof(PurchasingvVendorWithAddressColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum PurchasingvVendorWithContactColumnNames
	{	
		BusinessEntityID, 	
		Name, 	
		ContactType, 	
		Title, 	
		FirstName, 	
		MiddleName, 	
		LastName, 	
		Suffix, 	
		PhoneNumber, 	
		PhoneNumberType, 	
		EmailAddress, 	
		EmailPromotion, 	
	}

	public enum PurchasingvVendorWithContactCascadeNames
	{	
		}

	public class PurchasingvVendorWithContactTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public PurchasingvVendorWithContactTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = false;
			IdColumn = PurchasingvVendorWithContactColumnNames.BusinessEntityID.ToString();
			Schema = "Purchasing.vVendorWithContacts";
			TableName = "Purchasing.vVendorWithContacts";
			TableAlias = "purchasingvvendorwithcontact";
			ColumnNames = typeof(PurchasingvVendorWithContactColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum ProductionWorkOrderColumnNames
	{	
		Id, 	
		ProductID, 	
		OrderQty, 	
		StockedQty, 	
		ScrappedQty, 	
		StartDate, 	
		EndDate, 	
		DueDate, 	
		ScrapReasonID, 	
		ModifiedDate, 	
	}

	public enum ProductionWorkOrderCascadeNames
	{	
		productionworkorderrouting, 	
		
		productionproduct_p, 	
		productionscrapreason_p, 	}

	public class ProductionWorkOrderTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public ProductionWorkOrderTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = ProductionWorkOrderColumnNames.WorkOrderID.ToString();
			Schema = "Production.WorkOrder";
			TableName = "Production.WorkOrder";
			TableAlias = "productionworkorder";
			ColumnNames = typeof(ProductionWorkOrderColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_WorkOrder_Product_ProductID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, ProductionProduct>("ProductionProduct")),
			TableName = "Production.Product",
			Alias = TableAlias + "_" + "ProductionProduct",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, ProductionProduct>("ProductionProduct"));
					var st = (entity as ProductionWorkOrder);

					if (st == null || row == null)
						return st;

					if (row.ProductID == null || row.ProductID == default(int))
						return st;

					st.ProductionProduct = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = ProductionProductColumnNames.ProductID.ToString(),
					Operator = Operator.Equals,
					ParentField = ProductionWorkOrderColumnNames.ProductID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_WorkOrder_ScrapReason_ScrapReasonID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<short, ProductionScrapReason>("ProductionScrapReason")),
			TableName = "Production.ScrapReason",
			Alias = TableAlias + "_" + "ProductionScrapReason",
			Outer = true,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<short, ProductionScrapReason>("ProductionScrapReason"));
					var st = (entity as ProductionWorkOrder);

					if (st == null || row == null)
						return st;

					if (row.ScrapReasonID == null || row.ScrapReasonID == default(short))
						return st;

					st.ProductionScrapReason = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = ProductionScrapReasonColumnNames.ScrapReasonID.ToString(),
					Operator = Operator.Equals,
					ParentField = ProductionWorkOrderColumnNames.ScrapReasonID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using Dapper.Accelr8.Sql.AW2008DAO;
using Dapper.Accelr8.AW2008TableInfos;
using Dapper;
using Dapper.Accelr8.Sql;
using Dapper.Accelr8.Domain;
using Dapper.Accelr8.Repo;
using Dapper.Accelr8.Repo.Extensions;
using Dapper.Accelr8.Repo.Parameters;
using Dapper.Accelr8.Repo.Contracts.Readers;

namespace Dapper.Accelr8.AW2008TableInfos
{
	public enum ProductionWorkOrderRoutingColumnNames
	{	
		Id, 	
		Id, 	
		Id, 	
		LocationID, 	
		ScheduledStartDate, 	
		ScheduledEndDate, 	
		ActualStartDate, 	
		ActualEndDate, 	
		ActualResourceHrs, 	
		PlannedCost, 	
		ActualCost, 	
		ModifiedDate, 	
	}

	public enum ProductionWorkOrderRoutingCascadeNames
	{	
		
		productionworkorder_p, 	
		productionlocation_p, 	}

	public class ProductionWorkOrderRoutingTableInfo : Dapper.Accelr8.Sql.TableInfo
	{
		public ProductionWorkOrderRoutingTableInfo(ILoc8 loc8r) : base(loc8r)
		{
			UniqueId = true;
			IdColumn = ProductionWorkOrderRoutingColumnNames.WorkOrderID.ToString();
			Schema = "Production.WorkOrderRouting";
			TableName = "Production.WorkOrderRouting";
			TableAlias = "productionworkorderrouting";
			ColumnNames = typeof(ProductionWorkOrderRoutingColumnNames).ToDataList<Type, int>();

			Joins = new JoinInfo[] {
						//For Key FK_WorkOrderRouting_WorkOrder_WorkOrderID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<int, ProductionWorkOrder>("ProductionWorkOrder")),
			TableName = "Production.WorkOrder",
			Alias = TableAlias + "_" + "ProductionWorkOrder",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<int, ProductionWorkOrder>("ProductionWorkOrder"));
					var st = (entity as ProductionWorkOrderRouting);

					if (st == null || row == null)
						return st;

					if (row.WorkOrderID == null || row.WorkOrderID == default(int))
						return st;

					st.ProductionWorkOrder = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = ProductionWorkOrderColumnNames.WorkOrderID.ToString(),
					Operator = Operator.Equals,
					ParentField = ProductionWorkOrderRoutingColumnNames.WorkOrderID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						//For Key FK_WorkOrderRouting_Location_LocationID
			new JoinInfo() {
			Reader = new Func<IEntityReader>(() => Loc8r.GetReader<short, ProductionLocation>("ProductionLocation")),
			TableName = "Production.Location",
			Alias = TableAlias + "_" + "ProductionLocation",
			Outer = false,
			Load = (entity, row) =>
				{ 
					var reader = Loc8r.GetReader<short, ProductionLocation>("ProductionLocation"));
					var st = (entity as ProductionWorkOrderRouting);

					if (st == null || row == null)
						return st;

					if (row.LocationID == null || row.LocationID == default(short))
						return st;

					st.ProductionLocation = reader.LoadEntityObject(row);

					return st;
				},
			JoinQuery = new JoinQueryElement[]
			{
				new JoinQueryElement() 
				{ 
					JoinField = ProductionLocationColumnNames.LocationID.ToString(),
					Operator = Operator.Equals,
					ParentField = ProductionWorkOrderRoutingColumnNames.LocationID.ToString(),
					ParentTableAlias = TableAlias
				}
			} },
						};
		}
	}
}

		