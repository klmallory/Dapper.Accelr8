<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.DataSetExtensions" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.Runtime.InteropServices" #>
<#@ output extension=".cs" #>
<#@ include file="Includes\\Accelr8or.txt" #>
<#@ include file="Includes\\DbHelper.txt" #>
<#@ include file="Includes\\Manager.txt" #>
<#@ include file="Schema.txt" #>

<#
	var className = @"";
	var idType = @"";
	var entityType = @"";
	var idField = @"";

	var tables = SchemaHelper.GetTables();

	var manager = Manager.Create(Host, GenerationEnvironment);

	// Generate EntityReaders
	foreach (var t in tables)
	{
		var table = t.Value;

		if (table.Ignore)
			continue;

		Debug.WriteLine("Starting Entity domain for Table {0} ", t.Key);

		var name = Accelr8or.Inflector.MakeSingular(table.ClassName ?? table.TableName);

		className = name;

		if (table.Columns.Any(c => c.IsPrimaryKey && !c.Ignore))
		{
			idType = table.Columns.First(c => c.IsPrimaryKey).CSharpType;
			idField = table.Columns.First(c => c.IsPrimaryKey).ColumnName;
		}
		else
		{
			idType = table.Columns.First().CSharpType;
			idField = table.Columns.First().ColumnName;
		}

		manager.StartNewFile(Path.Combine(SchemaHelper.DomainDirectory, name + ".cs")); #>

using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Linq;
using System.Text;

using <#= SchemaHelper.DomainNamespace #>;
using Dapper;
using Dapper.Accelr8.Domain;
using System.Data.SqlTypes;

namespace <#= SchemaHelper.DomainNamespace #>
{
	public partial class <#= className #> : <#= SchemaHelper.BaseDomainEntity #><<#= idType #>>
	{
			public <#= className #>()
		{<# if (SchemaHelper.UseDirtyProperties)
		{ #>
			
			IsDirty = false; 
			<# }
				foreach (var child in table.Children.Where(c => !c.Ignore && !c.OneToOne))
		{ if (SchemaHelper.UseDirtyProperties) { 
			var backing = "_" + Accelr8or.Inflector.MakePlural(Accelr8or.Inflector.MakeInitialLowerCase(child.ChildClassName)).Replace("_num_", "");#>
<#= backing #> = new List<<#= child.ChildClassName #>>();
		<# } else { #>

	<#= Accelr8or.Inflector.MakePlural(child.ChildClassName) #> = new List<<#= child.ChildClassName #>>();
		<# } }
		
		foreach (var col in table.Columns.Where(c => !c.IsPrimaryKey && !c.Ignore 
			&& Accelr8or.GetNullableType(c.IsNullable, c.CastType ?? c.CSharpType)  == "DateTime"))
		{ if (SchemaHelper.UseDirtyProperties) { 
			var backing = "_" + Accelr8or.Inflector.MakeInitialLowerCase(col.ColumnFieldName).Replace("_num_", "");#>
<#= backing #> = (DateTime)SqlDateTime.MinValue;
		<# } else { #>

	<#= col.ColumnFieldName #> = (DateTime)SqlDateTime.MinValue;
		<# } }

		foreach (var col in table.Columns.Where(c => !c.IsPrimaryKey && !c.Ignore 
			&& Accelr8or.GetNullableType(c.IsNullable, c.CastType ?? c.CSharpType)  == "byte[]"))
		{ if (SchemaHelper.UseDirtyProperties) { 
			var backing = "_" + Accelr8or.Inflector.MakeInitialLowerCase(col.ColumnFieldName).Replace("_num_", "");#>
<#= backing #> = new byte[0];
		<# } else { #>

	<#= col.ColumnFieldName #> = new byte[0];
		<# } } #>}


	<# foreach (var col in table.Columns.Where(c => (!c.IsPrimaryKey || c.ColumnFieldName != "Id") && !c.Ignore))
	{
		if (SchemaHelper.UseDirtyProperties)
		{
		var backing = "_" + Accelr8or.Inflector.MakeInitialLowerCase(col.ColumnFieldName).Replace("_num_", "");#>	
		protected <#= Accelr8or.GetNullableType(col.IsNullable, col.CastType ?? col.CSharpType) #> <#= backing #>;
		public <#= Accelr8or.GetNullableType(col.IsNullable, col.CastType ?? col.CSharpType) #> <#= col.ColumnFieldName #> 
		{ 
			get { return <#= backing #>; }
			set 
			{ 
				<#= backing #> = value;  
				IsDirty = true;
			}
		} 
		<#} else
			{ #>
		public <#= Accelr8or.GetNullableType(col.IsNullable, col.CSharpType) #> <#= col.ColumnFieldName #> { get; set; }
		<# } } 
		foreach (var parent in table.Parents.Where(p => !p.Ignore))
	{ #> 
	//From Foreign Key <#= parent.Name #><#
		if (SchemaHelper.UseDirtyProperties)
		{
		var backing = "_" + Accelr8or.Inflector.MakeInitialLowerCase(Accelr8or.Inflector.MakeSingular(parent.ParentClassFieldName)).Replace("_num_", "");#>	
		protected <#= parent.ParentClassName #> <#= backing #>;
		public virtual <#= parent.ParentClassName #> <#= Accelr8or.Inflector.MakeSingular(parent.ParentClassFieldName) #> 
		{ 
			get { return <#= backing #>; }
			set 
			{ 
				<#= backing #> = value;  
				IsDirty = true;
			}
		} 
		<#} else
			{ #>
		public virtual <#= parent.ParentClassName #> <#= Accelr8or.Inflector.MakeSingular(parent.ParentClassFieldName) #> { get; set; }
		<# } } 
		foreach (var child in table.Children.Where(p => !p.Ignore && p.OneToOne))
	{ #> 
	//From Foreign Key <#= child.Name #><#
		if (SchemaHelper.UseDirtyProperties)
		{
		var backing = "_" + Accelr8or.Inflector.MakeInitialLowerCase(child.ChildClassFieldName);#>	
		protected <#= child.ChildClassName #> <#= backing #>;
		public virtual <#= child.ChildClassName #> <#= child.ChildClassFieldName #> 
		{ 
			get { return <#= backing #>; }
			set 
			{ 
				<#= backing #> = value;  
				IsDirty = true;
			}
		} 
		<#} else
			{ #>
		public virtual <#= child.ChildClassName #> <#= child.ChildClassFieldName #> { get; set; }
		<# } } 
		foreach (var child in table.Children.Where(c => !c.Ignore && !c.OneToOne))
		{#> 
	//From Foreign Key <#= child.Name #><#
			if (SchemaHelper.UseDirtyProperties)
			{
			var backing = "_" + Accelr8or.Inflector.MakePlural(Accelr8or.Inflector.MakeInitialLowerCase(child.ChildClassFieldName)).Replace("_num_", "");#>	
		protected IList<<#= child.ChildClassName #>> <#= backing #>;
		public virtual IList<<#= child.ChildClassName #>> <#= Accelr8or.Inflector.MakePlural(child.ChildClassFieldName) #> 
		{ 
			get { return <#= backing #>; }
			set 
			{ 
				<#= backing #> = value;  
				IsDirty = true;
			}
		} 
			<#} else
				{ #>
		public virtual IList<<#= child.ChildClassName #>> <#= Accelr8or.Inflector.MakePlural(child.ChildClassFieldName) #> { get; set; }
			<# } } #>
		}
}

		<# manager.EndBlock();
	}
	manager.Process(true);
#>