<#+
	class SchemaHelper
	{
		public static bool CacheLocatorResults = false;
		public static bool UseDirtyProperties = true;
		public static string BaseDomainEntity = "Dapper.Accelr8.Repo.Domain.BaseEntity";
		public static string DomainProject = "Dapper.Accelr8.Sql";
		public static string DomainNamespace = @"Dapper.Accelr8.Domain";
		public static string DomainDirectory = @"Domain";
		public static string WritersProject = "Dapper.Accelr8.Sql";
		public static string WritersNamespace = @"Dapper.Accelr8.Writers";
		public static string WritersDirectory = @"Writers";
		public static string ReadersProject = "Dapper.Accelr8.Sql";
		public static string ReadersNamespace = @"Dapper.Accelr8.Readers";
		public static string ReadersDirectory = @"Readers";
		public static string TableInfoProject = "Dapper.Accelr8.Sql";
		public static string TableInfoNamespace = @"Dapper.Accelr8.TableInfos";
		public static string TableInfoDirectory = @"TableInfos";

		static string _connectionString = @"Data Source=.\sqlexpress;Initial Catalog=AdventureWorks2008R2;Integrated Security=SSPI;";
		static string _database = @"AdventureWorks2008R2";

		// Change Names Here =>
		static Dictionary<string, string> tableNames = new Dictionary<string, string>()
		{ 

		};

		static Dictionary<string, string> tableAliases = new Dictionary<string, string>()
		{

		};

		static Dictionary<string, string> columnNames = new Dictionary<string, string>()
		{

		};

		static Dictionary<string, string> columnTypes = new Dictionary<string, string>()
		{

		};

		static SchemaHelper()
		{
			var project = Accelr8or.GetLibraryProject(DomainProject);
			var path = Accelr8or.GetProjectPath(project);
			DomainDirectory = Path.Combine(path, DomainDirectory);

			project = Accelr8or.GetLibraryProject(WritersProject);
			path = Accelr8or.GetProjectPath(project);
			WritersDirectory = Path.Combine(path, WritersDirectory);

			project = Accelr8or.GetLibraryProject(ReadersProject);
			path = Accelr8or.GetProjectPath(project);
			ReadersDirectory = Path.Combine(path, ReadersDirectory);

			project = Accelr8or.GetLibraryProject(TableInfoProject);
			path = Accelr8or.GetProjectPath(project);
			TableInfoDirectory = Path.Combine(path, TableInfoDirectory);
		}

		public static bool Equals(string s1, string s2)
		{
			return String.Equals(s1, s2, StringComparison.InvariantCultureIgnoreCase);
		}

		public static IDictionary<string, DbTable> GetTables()
		{
			var helper = new SqlServerDbHelper();

			// Read schema
			var tables = helper.GetDbTables(_connectionString, _database);

			//Tweak Tables Here.

			foreach (var t in tables)
			{
				if (t.Value.Ignore)
					continue;

				t.Value.Columns = helper.GetDbColumns(_connectionString, _database, t.Value.TableName, t.Value.SchemaName);
				t.Value.Children = helper.GetChildren(_connectionString, _database, t.Value.TableName, t.Value.SchemaName);
				t.Value.Parents = helper.GetParents(_connectionString, _database, t.Value.TableName, t.Value.SchemaName);
			}

			foreach (var t in tables)
			{
				if (t.Value.Ignore)
					continue;
					
				var tName = Accelr8or.Inflector.GetFriendlyName(helper.GetTableNameWithSchema(t.Value));

				if (tableNames.ContainsKey(tName))
				{
					Debug.WriteLine("renaming table {0} to {1}", t.Key, tableNames[t.Value.TableName]);
					t.Value.ClassName = tableNames[t.Value.TableName];
				}
				else
					t.Value.ClassName = Accelr8or.Inflector.MakeSingular(Accelr8or.Inflector.CamelCase(tName));

				if (tableAliases.ContainsKey(tName))
				{
					Debug.WriteLine("renaming table {0} to {1}", t.Key, tableAliases[tName]);
					t.Value.TableAlias = tableAliases[tName];
				}
				else
					t.Value.TableAlias = Accelr8or.Inflector.MakeSingular(tName).ToLower();

				foreach (var column in t.Value.Columns)
				{
					column.ColumnName = Accelr8or.Inflector.GetSafeName(column.ColumnName);

					if (column == t.Value.Columns.FirstOrDefault(co => co.IsPrimaryKey))
						column.FieldName = "Id";
					else if (columnNames.ContainsKey(t.Value.TableName + "." + column.ColumnName))
						column.FieldName = columnNames[t.Value.TableName + "." + column.ColumnName];
					else
						column.FieldName = Accelr8or.Inflector.MakeSingular(Accelr8or.Inflector.CamelCase(column.ColumnName));

					if (columnTypes.ContainsKey(t.Value.TableName + "." + column.ColumnName))
						column.CastType = columnTypes[t.Value.TableName + "." + column.ColumnName];
				}

				foreach(var c in t.Value.Children)
				{
					c.Column = Accelr8or.Inflector.GetSafeName(c.Column);
					c.ParentColumn = Accelr8or.Inflector.GetSafeName(c.ParentColumn);
					//c.Table = Accelr8or.Inflector.GetFriendlyName(c.Table);
					//c.ChildClassFieldName = Accelr8or.Inflector.GetFriendlyName(c.ChildClassFieldName);
					//c.ParentClassFieldName = Accelr8or.Inflector.GetFriendlyName(c.ParentClassFieldName);

					if (!tables.ContainsKey(c.Table) || tables[c.Table].Ignore)
						c.Ignore = true;

					if (!tables.ContainsKey(helper.GetParentNameWithSchema(c)) || tables[helper.GetParentNameWithSchema(c)].Ignore)
						c.Ignore = true;

					if (tableNames.ContainsKey(c.Table))
						c.ChildClassName = tableNames[c.Table];
					else
						c.ChildClassName = Accelr8or.Inflector.MakeSingular(Accelr8or.Inflector.CamelCase(c.Table));

					var pkCol = tables[c.Table].Columns.FirstOrDefault(cd => cd.IsPrimaryKey);

					if (pkCol != null && pkCol.ColumnName == c.Column)
						c.ChildFieldName = "Id";
					else if (columnNames.ContainsKey(t.Value.TableName + "." + c.Column))
						c.ChildFieldName = columnNames[t.Value.TableName + "." + c.Column];
					else
						c.ChildFieldName = Accelr8or.Inflector.MakeSingular(Accelr8or.Inflector.CamelCase(c.Column));

					if (tableAliases.ContainsKey(c.Table))
						c.TableAlias = tableAliases[c.Table];
					else
						c.TableAlias = Accelr8or.Inflector.MakeSingular(c.Table).ToLower();
				}

				foreach(var p in t.Value.Parents)
				{
					p.ParentColumn = Accelr8or.Inflector.GetSafeName(p.ParentColumn);
					p.Column = Accelr8or.Inflector.GetSafeName(p.Column);
					p.Parent = Accelr8or.Inflector.GetFriendlyName(p.Parent);
					//p.ParentClassFieldName = Accelr8or.Inflector.GetFriendlyName(p.ParentClassFieldName);

					if (!tables.ContainsKey(p.Table) || tables[p.Table].Ignore)
						p.Ignore = true;

					if (!tables.ContainsKey(helper.GetParentNameWithSchema(c)) || tables[helper.GetParentNameWithSchema(c)].Ignore)
						p.Ignore = true;

					if (tableNames.ContainsKey(p.Parent))
						p.ParentClassName = tableNames[p.Parent];
					else
						p.ParentClassName = Accelr8or.Inflector.MakeSingular(Accelr8or.Inflector.CamelCase(p.Parent));

					if (!tables.ContainsKey(p.Table))
						Debug.WriteLine("table not found" + p.Table);

					var pkCol = tables[p.Table].Columns.FirstOrDefault(cd => cd.IsPrimaryKey);

					if (pkCol != null && pkCol.ColumnName == p.ParentColumn)
						p.ParentFieldName = "Id";
					if (columnNames.ContainsKey(t.Value.TableName + "." + p.ParentColumn))
						p.ParentFieldName = columnNames[t.Value.TableName + "." + p.ParentColumn];
					else
						p.ParentFieldName = Accelr8or.Inflector.MakeSingular(Accelr8or.Inflector.CamelCase(p.ParentColumn));

					if (columnNames.ContainsKey(t.Value.TableName + "." + p.Column))
						p.ChildFieldName = columnNames[t.Value.TableName + "." + p.Column];
					else
						p.ChildFieldName = Accelr8or.Inflector.MakeSingular(Accelr8or.Inflector.CamelCase(p.Column));

					if (tableAliases.ContainsKey(p.Parent))
						p.ParentAlias = tableAliases[p.Parent];
					else
						p.ParentAlias = Accelr8or.Inflector.MakeSingular(p.Parent).ToLower();
				}
			}

			//Tweak Columns / Relationships Here.
			if (_database == "Northwnd")
			{
				tables["Employees"].Children.First(c => c.Name == "FK_EmployeeTerritories_Employees").ChildClassFieldName  = "EmployeeTerritories2";
				tables["Employees"].Children.First(c => c.Name == "FK_Employees_Employees").ParentClassFieldName = "ReportsToEmployee";
				tables["Employees"].Parents.First(c => c.Name == "FK_Employees_Employees").ParentClassFieldName = "ReportsToEmployee";
			}
			else if (_database == "AdventureWorks2008R2")
			{

			}

			return tables;
		}
	}
#>